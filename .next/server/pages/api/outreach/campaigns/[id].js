"use strict";(()=>{var a={};a.id=32,a.ids=[32],a.modules={67096:a=>{a.exports=require("bcrypt")},73227:a=>{a.exports=require("next-auth")},62113:a=>{a.exports=require("next-auth/next")},47449:a=>{a.exports=require("next-auth/providers/credentials")},93598:a=>{a.exports=require("next-auth/providers/google")},20145:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},45068:(a,e,t)=>{t.r(e),t.d(e,{config:()=>S,default:()=>C,routeModule:()=>j});var s={};t.r(s),t.d(s,{default:()=>p});var r=t(71802),n=t(47153),i=t(56249),o=t(24634),u=t(80544),c=t(62113),d=t(45884);async function p(a,e){try{let t=await (0,c.getServerSession)(a,e,d.authOptions);if(!t||!t.user)return e.status(401).json({error:"Unauthorized"});let{id:s}=a.query;if(!s||isNaN(parseInt(s)))return e.status(400).json({error:"Invalid campaign ID"});let r=parseInt(s);switch(a.method){case"GET":return await l(a,e,r);case"PUT":return await g(a,e,r,t);case"DELETE":return await m(a,e,r,t);case"POST":return await E(a,e,r,t);default:return e.status(405).json({error:"Method not allowed"})}}catch(a){return console.error("Error in campaign API:",a),e.status(500).json({error:"Internal server error"})}}async function l(a,e,t){try{let a=await (0,o.l9)(t);if(!a.success)return e.status(404).json({error:"Campaign not found"});let s=`
      SELECT * FROM outreach_messages
      WHERE campaign_id = $1
    `,r=await u.d_.query(s,[t]),n=`
      SELECT 
        COUNT(*) AS total,
        COUNT(CASE WHEN status = 'sent' THEN 1 END) AS sent,
        COUNT(CASE WHEN status = 'failed' THEN 1 END) AS failed,
        COUNT(CASE WHEN status = 'pending' THEN 1 END) AS pending
      FROM campaign_recipients
      WHERE campaign_id = $1
    `,i=await u.d_.query(n,[t]);return e.status(200).json({...a.campaign,messages:r.rows,recipientStats:i.rows[0]})}catch(a){return console.error("Error fetching campaign:",a),e.status(500).json({error:"Failed to fetch campaign"})}}async function g(a,e,t,s){try{let{name:s,description:r,channels:n,startDate:i,endDate:o,status:c}=a.body,d=`
      SELECT * FROM outreach_campaigns
      WHERE id = $1
    `,p=await u.d_.query(d,[t]);if(0===p.rows.length)return e.status(404).json({error:"Campaign not found"});let g=p.rows[0].status;if(c&&!({draft:["scheduled","in_progress","stopped"],scheduled:["in_progress","paused","stopped","completed"],in_progress:["paused","stopped","completed"],paused:["scheduled","stopped","completed"],stopped:["draft","scheduled"],completed:["draft"]})[g]?.includes(c))return e.status(400).json({error:"Invalid status transition",message:`Cannot change status from '${g}' to '${c}'`});let m=`
      UPDATE outreach_campaigns
      SET
        name = COALESCE($1, name),
        description = COALESCE($2, description),
        channels = COALESCE($3, channels),
        start_date = COALESCE($4, start_date),
        end_date = COALESCE($5, end_date),
        status = COALESCE($6, status),
        updated_at = NOW()
      WHERE id = $7
      RETURNING *
    `,E=[s,r,n?JSON.stringify(n):null,i,o,c,t];return await u.d_.query(m,E),await l(a,e,t)}catch(a){return console.error("Error updating campaign:",a),e.status(500).json({error:"Failed to update campaign"})}}async function m(a,e,t,s){try{let a=`
      SELECT * FROM outreach_campaigns
      WHERE id = $1
    `,s=await u.d_.query(a,[t]);if(0===s.rows.length)return e.status(404).json({error:"Campaign not found"});let r=s.rows[0];if(["in_progress","scheduled"].includes(r.status))return e.status(400).json({error:"Cannot delete active campaign",message:"Campaign must be stopped before it can be deleted"});await u.d_.query("BEGIN");try{return await u.d_.query("DELETE FROM campaign_recipients WHERE campaign_id = $1",[t]),await u.d_.query("DELETE FROM outreach_messages WHERE campaign_id = $1",[t]),await u.d_.query("DELETE FROM campaign_metrics WHERE campaign_id = $1",[t]),await u.d_.query("DELETE FROM campaign_channel_metrics WHERE campaign_id = $1",[t]),await u.d_.query("DELETE FROM outreach_campaigns WHERE id = $1",[t]),await u.d_.query("COMMIT"),e.status(200).json({success:!0,message:"Campaign deleted successfully"})}catch(a){throw await u.d_.query("ROLLBACK"),a}}catch(a){return console.error("Error deleting campaign:",a),e.status(500).json({error:"Failed to delete campaign"})}}async function E(a,e,t,s){try{let{action:s}=a.body;if(!s)return e.status(400).json({error:"Action is required"});let r=await (0,o.l9)(t);if(!r.success)return e.status(404).json({error:"Campaign not found"});let n=r.campaign;switch(s){case"schedule":return await h(a,e,t,n);case"execute":return await w(a,e,t,n);case"pause":return await _(a,e,t,n);case"resume":return await f(a,e,t,n);case"stop":return await y(a,e,t,n);default:return e.status(400).json({error:"Invalid action"})}}catch(a){return console.error("Error performing campaign action:",a),e.status(500).json({error:"Failed to perform campaign action"})}}async function h(a,e,t,s){try{let{scheduleOptions:r}=a.body;if(!r)return e.status(400).json({error:"Schedule options are required"});if("draft"!==s.status&&"paused"!==s.status&&"stopped"!==s.status)return e.status(400).json({error:"Invalid campaign status",message:`Cannot schedule campaign with status '${s.status}'`});let n=await (0,o.r9)(t,r);if(!n.success)return e.status(400).json({error:n.error,details:n.details});let i=await (0,o.l9)(t);return e.status(200).json({success:!0,message:"Campaign scheduled successfully",campaign:i.campaign})}catch(a){return console.error("Error scheduling campaign:",a),e.status(500).json({error:"Failed to schedule campaign"})}}async function w(a,e,t,s){try{if("draft"!==s.status&&"paused"!==s.status&&"scheduled"!==s.status)return e.status(400).json({error:"Invalid campaign status",message:`Cannot execute campaign with status '${s.status}'`});let a=await (0,o.sn)(t);if(!a.success)return e.status(400).json({error:a.error,details:a.details});let r=await (0,o.l9)(t);return e.status(200).json({success:!0,message:"Campaign executed successfully",results:a.results,campaign:r.campaign})}catch(a){return console.error("Error executing campaign:",a),e.status(500).json({error:"Failed to execute campaign"})}}async function _(a,e,t,s){try{if("scheduled"!==s.status&&"in_progress"!==s.status)return e.status(400).json({error:"Invalid campaign status",message:`Cannot pause campaign with status '${s.status}'`});let a=`
      UPDATE outreach_campaigns
      SET status = 'paused', updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;await u.d_.query(a,[t]);let r=await (0,o.l9)(t);return e.status(200).json({success:!0,message:"Campaign paused successfully",campaign:r.campaign})}catch(a){return console.error("Error pausing campaign:",a),e.status(500).json({error:"Failed to pause campaign"})}}async function f(a,e,t,s){try{if("paused"!==s.status)return e.status(400).json({error:"Invalid campaign status",message:`Cannot resume campaign with status '${s.status}'`});let a=`
      UPDATE outreach_campaigns
      SET status = 'scheduled', updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;await u.d_.query(a,[t]),s.schedule_options&&await (0,o.r9)(t,JSON.parse(s.schedule_options));let r=await (0,o.l9)(t);return e.status(200).json({success:!0,message:"Campaign resumed successfully",campaign:r.campaign})}catch(a){return console.error("Error resuming campaign:",a),e.status(500).json({error:"Failed to resume campaign"})}}async function y(a,e,t,s){try{if("scheduled"!==s.status&&"in_progress"!==s.status&&"paused"!==s.status)return e.status(400).json({error:"Invalid campaign status",message:`Cannot stop campaign with status '${s.status}'`});let a=`
      UPDATE outreach_campaigns
      SET status = 'stopped', updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;await u.d_.query(a,[t]);let r=await (0,o.l9)(t);return e.status(200).json({success:!0,message:"Campaign stopped successfully",campaign:r.campaign})}catch(a){return console.error("Error stopping campaign:",a),e.status(500).json({error:"Failed to stop campaign"})}}let C=(0,i.l)(s,"default"),S=(0,i.l)(s,"config"),j=new r.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/outreach/campaigns/[id]",pathname:"/api/outreach/campaigns/[id]",bundlePath:"",filename:""},userland:s})},80544:(a,e,t)=>{t.d(e,{d_:()=>s});let s={query:async(a,e=[])=>(console.log(`Utils pool query: ${a}`,e),{rows:[],rowCount:0}),connect:async()=>(console.log("Utils pool connection established"),{query:async(a,e=[])=>(console.log(`Utils connection query: ${a}`,e),{rows:[],rowCount:0}),release:()=>console.log("Utils connection released")})}},24634:(a,e,t)=>{t.d(e,{l9:()=>r,mK:()=>s,r9:()=>n,sn:()=>i,tP:()=>o});let s=async a=>(console.log("Creating outreach campaign:",a),{success:!0,campaign:{id:`campaign_${Date.now()}`,...a,status:"draft",created_at:new Date().toISOString(),updated_at:new Date().toISOString()}}),r=async a=>(console.log(`Getting campaign ${a}`),{success:!0,campaign:{id:a,name:"Sample Campaign",description:"Demo outreach campaign",status:"draft",channels:["email","whatsapp"],created_at:"2024-01-15T10:00:00.000Z",updated_at:"2024-01-15T10:00:00.000Z"}}),n=async(a,e)=>(console.log(`Scheduling campaign ${a} for ${e}`),{success:!0,campaign:{id:a,status:"scheduled",scheduled_at:e,updated_at:new Date().toISOString()}}),i=async a=>(console.log(`Executing campaign ${a} immediately`),{success:!0,execution:{campaign_id:a,status:"executing",started_at:new Date().toISOString(),estimated_completion:new Date(Date.now()+18e5).toISOString()}}),o=async(a,e)=>(console.log(`Adding ${e.length} recipients to campaign ${a}`),{success:!0,added:e.length,recipients:e.map((e,t)=>({id:`recipient_${Date.now()}_${t}`,...e,campaign_id:a,status:"pending",added_at:new Date().toISOString()}))})}};var e=require("../../../../webpack-api-runtime.js");e.C(a);var t=a=>e(e.s=a),s=e.X(0,[8074],()=>t(45068));module.exports=s})();