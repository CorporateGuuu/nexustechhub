"use strict";(()=>{var e={};e.id=1188,e.ids=[1188],e.modules={967:(e,t,a)=>{a.d(t,{dz:()=>s});let s={query:async(e,t=[])=>(console.log(`Utils pool query: ${e}`,t),{rows:[],rowCount:0}),connect:async()=>(console.log("Utils pool connection established"),{query:async(e,t=[])=>(console.log(`Utils connection query: ${e}`,t),{rows:[],rowCount:0}),release:()=>console.log("Utils connection released")})},r=async(e,t=[])=>(console.log(`Utils database query: ${e}`,t),{rows:[],rowCount:0})},5486:e=>{e.exports=require("bcrypt")},15806:e=>{e.exports=require("next-auth/next")},16382:e=>{e.exports=require("next-auth/providers/credentials")},21572:e=>{e.exports=require("nodemailer")},25526:(e,t,a)=>{a.d(t,{WF:()=>n,bi:()=>s,gi:()=>i,hv:()=>o,tm:()=>r});let s=async e=>(console.log("Creating outreach campaign:",e),{success:!0,campaign:{id:`campaign_${Date.now()}`,...e,status:"draft",created_at:new Date().toISOString(),updated_at:new Date().toISOString()}}),r=async e=>(console.log(`Getting campaign ${e}`),{success:!0,campaign:{id:e,name:"Sample Campaign",description:"Demo outreach campaign",status:"draft",channels:["email","whatsapp"],created_at:"2024-01-15T10:00:00.000Z",updated_at:"2024-01-15T10:00:00.000Z"}}),n=async(e,t)=>(console.log(`Scheduling campaign ${e} for ${t}`),{success:!0,campaign:{id:e,status:"scheduled",scheduled_at:t,updated_at:new Date().toISOString()}}),i=async e=>(console.log(`Executing campaign ${e} immediately`),{success:!0,execution:{campaign_id:e,status:"executing",started_at:new Date().toISOString(),estimated_completion:new Date(Date.now()+18e5).toISOString()}}),o=async(e,t)=>(console.log(`Adding ${t.length} recipients to campaign ${e}`),{success:!0,added:t.length,recipients:t.map((t,a)=>({id:`recipient_${Date.now()}_${a}`,...t,campaign_id:e,status:"pending",added_at:new Date().toISOString()}))})},47527:(e,t,a)=>{a.r(t),a.d(t,{config:()=>S,default:()=>C,routeModule:()=>j});var s={};a.r(s),a.d(s,{default:()=>p});var r=a(33480),n=a(8667),i=a(86435),o=a(25526),u=a(967),c=a(15806),d=a(52043);async function p(e,t){try{let a=await (0,c.getServerSession)(e,t,d.authOptions);if(!a||!a.user)return t.status(401).json({error:"Unauthorized"});let{id:s}=e.query;if(!s||isNaN(parseInt(s)))return t.status(400).json({error:"Invalid campaign ID"});let r=parseInt(s);switch(e.method){case"GET":return await l(e,t,r);case"PUT":return await g(e,t,r,a);case"DELETE":return await m(e,t,r,a);case"POST":return await E(e,t,r,a);default:return t.status(405).json({error:"Method not allowed"})}}catch(e){return console.error("Error in campaign API:",e),t.status(500).json({error:"Internal server error"})}}async function l(e,t,a){try{let e=await (0,o.tm)(a);if(!e.success)return t.status(404).json({error:"Campaign not found"});let s=`
      SELECT * FROM outreach_messages
      WHERE campaign_id = $1
    `,r=await u.dz.query(s,[a]),n=`
      SELECT 
        COUNT(*) AS total,
        COUNT(CASE WHEN status = 'sent' THEN 1 END) AS sent,
        COUNT(CASE WHEN status = 'failed' THEN 1 END) AS failed,
        COUNT(CASE WHEN status = 'pending' THEN 1 END) AS pending
      FROM campaign_recipients
      WHERE campaign_id = $1
    `,i=await u.dz.query(n,[a]);return t.status(200).json({...e.campaign,messages:r.rows,recipientStats:i.rows[0]})}catch(e){return console.error("Error fetching campaign:",e),t.status(500).json({error:"Failed to fetch campaign"})}}async function g(e,t,a,s){try{var r,n;let{name:s,description:i,channels:o,startDate:c,endDate:d,status:p}=e.body,g=`
      SELECT * FROM outreach_campaigns
      WHERE id = $1
    `,m=await u.dz.query(g,[a]);if(0===m.rows.length)return t.status(404).json({error:"Campaign not found"});let E=m.rows[0].status;if(p&&(r=E,n=p,!({draft:["scheduled","in_progress","stopped"],scheduled:["in_progress","paused","stopped","completed"],in_progress:["paused","stopped","completed"],paused:["scheduled","stopped","completed"],stopped:["draft","scheduled"],completed:["draft"]})[r]?.includes(n)&&1))return t.status(400).json({error:"Invalid status transition",message:`Cannot change status from '${E}' to '${p}'`});let h=`
      UPDATE outreach_campaigns
      SET
        name = COALESCE($1, name),
        description = COALESCE($2, description),
        channels = COALESCE($3, channels),
        start_date = COALESCE($4, start_date),
        end_date = COALESCE($5, end_date),
        status = COALESCE($6, status),
        updated_at = NOW()
      WHERE id = $7
      RETURNING *
    `,w=[s,i,o?JSON.stringify(o):null,c,d,p,a];return await u.dz.query(h,w),await l(e,t,a)}catch(e){return console.error("Error updating campaign:",e),t.status(500).json({error:"Failed to update campaign"})}}async function m(e,t,a,s){try{let e=`
      SELECT * FROM outreach_campaigns
      WHERE id = $1
    `,s=await u.dz.query(e,[a]);if(0===s.rows.length)return t.status(404).json({error:"Campaign not found"});let r=s.rows[0];if(["in_progress","scheduled"].includes(r.status))return t.status(400).json({error:"Cannot delete active campaign",message:"Campaign must be stopped before it can be deleted"});await u.dz.query("BEGIN");try{return await u.dz.query("DELETE FROM campaign_recipients WHERE campaign_id = $1",[a]),await u.dz.query("DELETE FROM outreach_messages WHERE campaign_id = $1",[a]),await u.dz.query("DELETE FROM campaign_metrics WHERE campaign_id = $1",[a]),await u.dz.query("DELETE FROM campaign_channel_metrics WHERE campaign_id = $1",[a]),await u.dz.query("DELETE FROM outreach_campaigns WHERE id = $1",[a]),await u.dz.query("COMMIT"),t.status(200).json({success:!0,message:"Campaign deleted successfully"})}catch(e){throw await u.dz.query("ROLLBACK"),e}}catch(e){return console.error("Error deleting campaign:",e),t.status(500).json({error:"Failed to delete campaign"})}}async function E(e,t,a,s){try{let{action:s}=e.body;if(!s)return t.status(400).json({error:"Action is required"});let r=await (0,o.tm)(a);if(!r.success)return t.status(404).json({error:"Campaign not found"});let n=r.campaign;switch(s){case"schedule":return await h(e,t,a,n);case"execute":return await w(e,t,a,n);case"pause":return await y(e,t,a,n);case"resume":return await f(e,t,a,n);case"stop":return await _(e,t,a,n);default:return t.status(400).json({error:"Invalid action"})}}catch(e){return console.error("Error performing campaign action:",e),t.status(500).json({error:"Failed to perform campaign action"})}}async function h(e,t,a,s){try{let{scheduleOptions:r}=e.body;if(!r)return t.status(400).json({error:"Schedule options are required"});if("draft"!==s.status&&"paused"!==s.status&&"stopped"!==s.status)return t.status(400).json({error:"Invalid campaign status",message:`Cannot schedule campaign with status '${s.status}'`});let n=await (0,o.WF)(a,r);if(!n.success)return t.status(400).json({error:n.error,details:n.details});let i=await (0,o.tm)(a);return t.status(200).json({success:!0,message:"Campaign scheduled successfully",campaign:i.campaign})}catch(e){return console.error("Error scheduling campaign:",e),t.status(500).json({error:"Failed to schedule campaign"})}}async function w(e,t,a,s){try{if("draft"!==s.status&&"paused"!==s.status&&"scheduled"!==s.status)return t.status(400).json({error:"Invalid campaign status",message:`Cannot execute campaign with status '${s.status}'`});let e=await (0,o.gi)(a);if(!e.success)return t.status(400).json({error:e.error,details:e.details});let r=await (0,o.tm)(a);return t.status(200).json({success:!0,message:"Campaign executed successfully",results:e.results,campaign:r.campaign})}catch(e){return console.error("Error executing campaign:",e),t.status(500).json({error:"Failed to execute campaign"})}}async function y(e,t,a,s){try{if("scheduled"!==s.status&&"in_progress"!==s.status)return t.status(400).json({error:"Invalid campaign status",message:`Cannot pause campaign with status '${s.status}'`});let e=`
      UPDATE outreach_campaigns
      SET status = 'paused', updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;await u.dz.query(e,[a]);let r=await (0,o.tm)(a);return t.status(200).json({success:!0,message:"Campaign paused successfully",campaign:r.campaign})}catch(e){return console.error("Error pausing campaign:",e),t.status(500).json({error:"Failed to pause campaign"})}}async function f(e,t,a,s){try{if("paused"!==s.status)return t.status(400).json({error:"Invalid campaign status",message:`Cannot resume campaign with status '${s.status}'`});let e=`
      UPDATE outreach_campaigns
      SET status = 'scheduled', updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;await u.dz.query(e,[a]),s.schedule_options&&await (0,o.WF)(a,JSON.parse(s.schedule_options));let r=await (0,o.tm)(a);return t.status(200).json({success:!0,message:"Campaign resumed successfully",campaign:r.campaign})}catch(e){return console.error("Error resuming campaign:",e),t.status(500).json({error:"Failed to resume campaign"})}}async function _(e,t,a,s){try{if("scheduled"!==s.status&&"in_progress"!==s.status&&"paused"!==s.status)return t.status(400).json({error:"Invalid campaign status",message:`Cannot stop campaign with status '${s.status}'`});let e=`
      UPDATE outreach_campaigns
      SET status = 'stopped', updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;await u.dz.query(e,[a]);let r=await (0,o.tm)(a);return t.status(200).json({success:!0,message:"Campaign stopped successfully",campaign:r.campaign})}catch(e){return console.error("Error stopping campaign:",e),t.status(500).json({error:"Failed to stop campaign"})}}let C=(0,i.M)(s,"default"),S=(0,i.M)(s,"config"),j=new r.PagesAPIRouteModule({definition:{kind:n.A.PAGES_API,page:"/api/outreach/campaigns/[id]",pathname:"/api/outreach/campaigns/[id]",bundlePath:"",filename:""},userland:s})},50804:e=>{e.exports=require("next-auth/providers/email")},65542:e=>{e.exports=require("next-auth")},75600:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},77851:e=>{e.exports=require("next-auth/providers/google")}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[2622],()=>a(47527));module.exports=s})();