{
  "summary": {
    "totalTests": 64,
    "passedTests": 40,
    "failedTests": 24,
    "skippedTests": 0
  },
  "results": [
    {
      "file": "tests/api/external/tickets.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (48 ms)\n    ✓ GET /tickets with pagination should work (4 ms)\n    ✓ POST /tickets should create new ticket (6 ms)\n    ✕ POST /tickets with missing required fields should return error (8 ms)\n    ✕ GET /tickets with invalid API key should return error (1 ms)\n    ✓ GET /tickets with different priorities should work (8 ms)\n    ✓ GET /tickets with status filter should work (1 ms)\n    ✓ GET /tickets with date range should work (4 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.279 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/tickets.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-tickets.external.test.json\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (48 ms)\n    ✓ GET /tickets with pagination should work (4 ms)\n    ✓ POST /tickets should create new ticket (6 ms)\n    ✕ POST /tickets with missing required fields should return error (8 ms)\n    ✕ GET /tickets with invalid API key should return error (1 ms)\n    ✓ GET /tickets with different priorities should work (8 ms)\n    ✓ GET /tickets with status filter should work (1 ms)\n    ✓ GET /tickets with date range should work (4 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.279 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 8,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467902073,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 48,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets should return ticket list",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets should return ticket list"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 4,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with pagination should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with pagination should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 6,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets POST /tickets should create new ticket",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /tickets should create new ticket"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 8,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/tickets.external.test.js:94:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Tickets POST /tickets with missing required fields should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /tickets with missing required fields should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 1,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/tickets.external.test.js:110:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with invalid API key should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /tickets with invalid API key should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 8,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with different priorities should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with different priorities should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 1,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with status filter should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with status filter should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 4,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with date range should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with date range should work"
              }
            ],
            "endTime": 1757467903329,
            "message": "  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/tickets.external.test.js",
            "startTime": 1757467902253,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/customer.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (63 ms)\n    ✓ GET /customers with pagination should work (5 ms)\n    ✓ GET /customers/:id with valid ID should return customer (8 ms)\n    ✕ GET /customers/:id with invalid ID should return error (11 ms)\n    ✓ POST /customers should create new customer (2 ms)\n    ✕ POST /customers with missing required fields should return error (8 ms)\n    ✓ POST /customers with duplicate email should return error (3 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (2 ms)\n    ✕ GET /customers with invalid API key should return error (3 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.211 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/customer.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-customer.external.test.json\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (63 ms)\n    ✓ GET /customers with pagination should work (5 ms)\n    ✓ GET /customers/:id with valid ID should return customer (8 ms)\n    ✕ GET /customers/:id with invalid ID should return error (11 ms)\n    ✓ POST /customers should create new customer (2 ms)\n    ✕ POST /customers with missing required fields should return error (8 ms)\n    ✓ POST /customers with duplicate email should return error (3 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (2 ms)\n    ✕ GET /customers with invalid API key should return error (3 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.211 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 4,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 10,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467906733,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 63,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers GET /customers should return customer list",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /customers should return customer list"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 5,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers GET /customers with pagination should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /customers with pagination should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 8,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers GET /customers/:id with valid ID should return customer",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /customers/:id with valid ID should return customer"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 11,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:82:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Customers GET /customers/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /customers/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers POST /customers should create new customer",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /customers should create new customer"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 8,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:110:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Customers POST /customers with missing required fields should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /customers with missing required fields should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 3,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers POST /customers with duplicate email should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 2,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /customers with duplicate email should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers PUT /customers/:id should update customer",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "PUT /customers/:id should update customer"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:151:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Customers PUT /customers/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "PUT /customers/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 3,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:167:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Customers GET /customers with invalid API key should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /customers with invalid API key should return error"
              }
            ],
            "endTime": 1757467907930,
            "message": "  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js",
            "startTime": 1757467906948,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/invoices.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    No invoices found for individual test\n\n      at Object.log (tests/api/external/invoices.external.test.js:79:15)\n\n  console.log\n    Test for /invoices/999999999 succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\nFAIL tests/api/external/invoices.external.test.js\n  External RepairDesk API Tests - Invoices\n    ✓ GET /invoices should return invoice list (34 ms)\n    ✓ GET /invoices with pagination should work (2 ms)\n    ✓ GET /invoices/:id with valid ID should return invoice (2 ms)\n    ✕ GET /invoices/:id with invalid ID should return error (5 ms)\n    ✓ POST /invoices should create new invoice (4 ms)\n    ✕ POST /invoices with missing required fields should return error (3 ms)\n    ✕ POST /invoices with invalid customer ID should return error (3 ms)\n    ✓ GET /invoices with status filter should work (1 ms)\n    ✓ GET /invoices with date range should work (1 ms)\n    ✕ GET /invoices with invalid API key should return error\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      84 |     const result = await testEndpoint(`/invoices/${config.nonExistentTicketId}`);\n      85 |     // Depending on API, might return null or error response\n    > 86 |     expect(result).toBeNull();\n         |                    ^\n      87 |   });\n      88 |\n      89 |   test('POST /invoices should create new invoice', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:86:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      128 |\n      129 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 130 |     expect(result).toBeNull(); // Should fail due to missing required fields\n          |                    ^\n      131 |   });\n      132 |\n      133 |   test('POST /invoices with invalid customer ID should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:130:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with invalid customer ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      147 |\n      148 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 149 |     expect(result).toBeNull(); // Should fail due to invalid customer\n          |                    ^\n      150 |   });\n      151 |\n      152 |   test('GET /invoices with status filter should work', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:149:20)\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      175 |\n      176 |     const result = await invalidTestEndpoint('/invoices');\n    > 177 |     expect(result).toBeNull();\n          |                    ^\n      178 |   });\n      179 | });\n      180 |\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:177:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        0.579 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/invoices.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-invoices.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/invoices.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-invoices.external.test.json\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    No invoices found for individual test\n\n      at Object.log (tests/api/external/invoices.external.test.js:79:15)\n\n  console.log\n    Test for /invoices/999999999 succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\nFAIL tests/api/external/invoices.external.test.js\n  External RepairDesk API Tests - Invoices\n    ✓ GET /invoices should return invoice list (34 ms)\n    ✓ GET /invoices with pagination should work (2 ms)\n    ✓ GET /invoices/:id with valid ID should return invoice (2 ms)\n    ✕ GET /invoices/:id with invalid ID should return error (5 ms)\n    ✓ POST /invoices should create new invoice (4 ms)\n    ✕ POST /invoices with missing required fields should return error (3 ms)\n    ✕ POST /invoices with invalid customer ID should return error (3 ms)\n    ✓ GET /invoices with status filter should work (1 ms)\n    ✓ GET /invoices with date range should work (1 ms)\n    ✕ GET /invoices with invalid API key should return error\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      84 |     const result = await testEndpoint(`/invoices/${config.nonExistentTicketId}`);\n      85 |     // Depending on API, might return null or error response\n    > 86 |     expect(result).toBeNull();\n         |                    ^\n      87 |   });\n      88 |\n      89 |   test('POST /invoices should create new invoice', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:86:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      128 |\n      129 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 130 |     expect(result).toBeNull(); // Should fail due to missing required fields\n          |                    ^\n      131 |   });\n      132 |\n      133 |   test('POST /invoices with invalid customer ID should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:130:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with invalid customer ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      147 |\n      148 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 149 |     expect(result).toBeNull(); // Should fail due to invalid customer\n          |                    ^\n      150 |   });\n      151 |\n      152 |   test('GET /invoices with status filter should work', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:149:20)\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      175 |\n      176 |     const result = await invalidTestEndpoint('/invoices');\n    > 177 |     expect(result).toBeNull();\n          |                    ^\n      178 |   });\n      179 | });\n      180 |\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:177:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        0.579 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/invoices.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-invoices.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 4,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 10,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467909969,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 34,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices should return invoice list",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /invoices should return invoice list"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices with pagination should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /invoices with pagination should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices/:id with valid ID should return invoice",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /invoices/:id with valid ID should return invoice"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 5,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/invoices.external.test.js:86:20)"
                ],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /invoices/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 4,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Invoices POST /invoices should create new invoice",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 4,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /invoices should create new invoice"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 3,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/invoices.external.test.js:130:20)"
                ],
                "fullName": "External RepairDesk API Tests - Invoices POST /invoices with missing required fields should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /invoices with missing required fields should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 3,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/invoices.external.test.js:149:20)"
                ],
                "fullName": "External RepairDesk API Tests - Invoices POST /invoices with invalid customer ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /invoices with invalid customer ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 1,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices with status filter should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /invoices with status filter should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 1,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices with date range should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /invoices with date range should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Invoices"
                ],
                "duration": 0,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/invoices.external.test.js:177:20)"
                ],
                "fullName": "External RepairDesk API Tests - Invoices GET /invoices with invalid API key should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /invoices with invalid API key should return error"
              }
            ],
            "endTime": 1757467910541,
            "message": "  ● External RepairDesk API Tests - Invoices › GET /invoices/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      84 |     const result = await testEndpoint(`/invoices/${config.nonExistentTicketId}`);\n      85 |     // Depending on API, might return null or error response\n    > 86 |     expect(result).toBeNull();\n         |                    ^\n      87 |   });\n      88 |\n      89 |   test('POST /invoices should create new invoice', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:86:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      128 |\n      129 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 130 |     expect(result).toBeNull(); // Should fail due to missing required fields\n          |                    ^\n      131 |   });\n      132 |\n      133 |   test('POST /invoices with invalid customer ID should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:130:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with invalid customer ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      147 |\n      148 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 149 |     expect(result).toBeNull(); // Should fail due to invalid customer\n          |                    ^\n      150 |   });\n      151 |\n      152 |   test('GET /invoices with status filter should work', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:149:20)\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      175 |\n      176 |     const result = await invalidTestEndpoint('/invoices');\n    > 177 |     expect(result).toBeNull();\n          |                    ^\n      178 |   });\n      179 | });\n      180 |\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:177:20)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/invoices.external.test.js",
            "startTime": 1757467910048,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/repaircategories.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for individual test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:73:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for update test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:135:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Could not create test category for delete test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:165:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\nFAIL tests/api/external/repaircategories.external.test.js\n  External RepairDesk API Tests - Repair Categories\n    ✓ GET /repaircategories should return repair categories list (41 ms)\n    ✓ GET /repaircategories/:id with valid ID should return repair category (2 ms)\n    ✕ GET /repaircategories/:id with invalid ID should return error (2 ms)\n    ✓ POST /repaircategories should create new repair category (2 ms)\n    ✕ POST /repaircategories with missing required fields should return error (1 ms)\n    ✓ POST /repaircategories with duplicate name should return error (1 ms)\n    ✓ PUT /repaircategories/:id should update repair category (2 ms)\n    ✕ PUT /repaircategories/:id with invalid ID should return error (1 ms)\n    ✓ DELETE /repaircategories/:id should delete repair category (2 ms)\n    ✕ DELETE /repaircategories/:id with invalid ID should return error (1 ms)\n    ✕ GET /repaircategories with invalid API key should return error\n    ✓ GET /repaircategories should include manufacturers and devices data (1 ms)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      78 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`);\n      79 |     // Depending on API, might return null or error response\n    > 80 |     expect(result).toBeNull();\n         |                    ^\n      81 |   });\n      82 |\n      83 |   test('POST /repaircategories should create new repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:80:20)\n\n  ● External RepairDesk API Tests - Repair Categories › POST /repaircategories with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      102 |\n      103 |     const result = await testEndpoint('/repaircategories', 'POST', invalidCategory);\n    > 104 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      105 |   });\n      106 |\n      107 |   test('POST /repaircategories with duplicate name should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:104:20)\n\n  ● External RepairDesk API Tests - Repair Categories › PUT /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      143 |\n      144 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 145 |     expect(result).toBeNull();\n          |                    ^\n      146 |   });\n      147 |\n      148 |   test('DELETE /repaircategories/:id should delete repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:145:20)\n\n  ● External RepairDesk API Tests - Repair Categories › DELETE /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      169 |   test('DELETE /repaircategories/:id with invalid ID should return error', async () => {\n      170 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'DELETE');\n    > 171 |     expect(result).toBeNull();\n          |                    ^\n      172 |   });\n      173 |\n      174 |   test('GET /repaircategories with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:171:20)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      185 |\n      186 |     const result = await invalidTestEndpoint('/repaircategories');\n    > 187 |     expect(result).toBeNull();\n          |                    ^\n      188 |   });\n      189 |\n      190 |   test('GET /repaircategories should include manufacturers and devices data', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:187:20)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        0.566 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/repaircategories.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-repaircategories.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/repaircategories.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-repaircategories.external.test.json\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for individual test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:73:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for update test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:135:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Could not create test category for delete test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:165:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\nFAIL tests/api/external/repaircategories.external.test.js\n  External RepairDesk API Tests - Repair Categories\n    ✓ GET /repaircategories should return repair categories list (41 ms)\n    ✓ GET /repaircategories/:id with valid ID should return repair category (2 ms)\n    ✕ GET /repaircategories/:id with invalid ID should return error (2 ms)\n    ✓ POST /repaircategories should create new repair category (2 ms)\n    ✕ POST /repaircategories with missing required fields should return error (1 ms)\n    ✓ POST /repaircategories with duplicate name should return error (1 ms)\n    ✓ PUT /repaircategories/:id should update repair category (2 ms)\n    ✕ PUT /repaircategories/:id with invalid ID should return error (1 ms)\n    ✓ DELETE /repaircategories/:id should delete repair category (2 ms)\n    ✕ DELETE /repaircategories/:id with invalid ID should return error (1 ms)\n    ✕ GET /repaircategories with invalid API key should return error\n    ✓ GET /repaircategories should include manufacturers and devices data (1 ms)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      78 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`);\n      79 |     // Depending on API, might return null or error response\n    > 80 |     expect(result).toBeNull();\n         |                    ^\n      81 |   });\n      82 |\n      83 |   test('POST /repaircategories should create new repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:80:20)\n\n  ● External RepairDesk API Tests - Repair Categories › POST /repaircategories with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      102 |\n      103 |     const result = await testEndpoint('/repaircategories', 'POST', invalidCategory);\n    > 104 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      105 |   });\n      106 |\n      107 |   test('POST /repaircategories with duplicate name should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:104:20)\n\n  ● External RepairDesk API Tests - Repair Categories › PUT /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      143 |\n      144 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 145 |     expect(result).toBeNull();\n          |                    ^\n      146 |   });\n      147 |\n      148 |   test('DELETE /repaircategories/:id should delete repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:145:20)\n\n  ● External RepairDesk API Tests - Repair Categories › DELETE /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      169 |   test('DELETE /repaircategories/:id with invalid ID should return error', async () => {\n      170 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'DELETE');\n    > 171 |     expect(result).toBeNull();\n          |                    ^\n      172 |   });\n      173 |\n      174 |   test('GET /repaircategories with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:171:20)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      185 |\n      186 |     const result = await invalidTestEndpoint('/repaircategories');\n    > 187 |     expect(result).toBeNull();\n          |                    ^\n      188 |   });\n      189 |\n      190 |   test('GET /repaircategories should include manufacturers and devices data', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:187:20)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        0.566 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/repaircategories.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-repaircategories.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 5,
        "numPassedTestSuites": 0,
        "numPassedTests": 7,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 12,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467912433,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 41,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories GET /repaircategories should return repair categories list",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /repaircategories should return repair categories list"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories GET /repaircategories/:id with valid ID should return repair category",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /repaircategories/:id with valid ID should return repair category"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 2,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/repaircategories.external.test.js:80:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Repair Categories GET /repaircategories/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /repaircategories/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories POST /repaircategories should create new repair category",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /repaircategories should create new repair category"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 1,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/repaircategories.external.test.js:104:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Repair Categories POST /repaircategories with missing required fields should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /repaircategories with missing required fields should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 1,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories POST /repaircategories with duplicate name should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 2,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /repaircategories with duplicate name should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories PUT /repaircategories/:id should update repair category",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "PUT /repaircategories/:id should update repair category"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 1,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/repaircategories.external.test.js:145:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Repair Categories PUT /repaircategories/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "PUT /repaircategories/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories DELETE /repaircategories/:id should delete repair category",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "DELETE /repaircategories/:id should delete repair category"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 1,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/repaircategories.external.test.js:171:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Repair Categories DELETE /repaircategories/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "DELETE /repaircategories/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 0,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/repaircategories.external.test.js:187:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Repair Categories GET /repaircategories with invalid API key should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /repaircategories with invalid API key should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Categories"
                ],
                "duration": 1,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Categories GET /repaircategories should include manufacturers and devices data",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /repaircategories should include manufacturers and devices data"
              }
            ],
            "endTime": 1757467912993,
            "message": "  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      78 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`);\n      79 |     // Depending on API, might return null or error response\n    > 80 |     expect(result).toBeNull();\n         |                    ^\n      81 |   });\n      82 |\n      83 |   test('POST /repaircategories should create new repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:80:20)\n\n  ● External RepairDesk API Tests - Repair Categories › POST /repaircategories with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      102 |\n      103 |     const result = await testEndpoint('/repaircategories', 'POST', invalidCategory);\n    > 104 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      105 |   });\n      106 |\n      107 |   test('POST /repaircategories with duplicate name should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:104:20)\n\n  ● External RepairDesk API Tests - Repair Categories › PUT /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      143 |\n      144 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 145 |     expect(result).toBeNull();\n          |                    ^\n      146 |   });\n      147 |\n      148 |   test('DELETE /repaircategories/:id should delete repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:145:20)\n\n  ● External RepairDesk API Tests - Repair Categories › DELETE /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      169 |   test('DELETE /repaircategories/:id with invalid ID should return error', async () => {\n      170 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'DELETE');\n    > 171 |     expect(result).toBeNull();\n          |                    ^\n      172 |   });\n      173 |\n      174 |   test('GET /repaircategories with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:171:20)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      185 |\n      186 |     const result = await invalidTestEndpoint('/repaircategories');\n    > 187 |     expect(result).toBeNull();\n          |                    ^\n      188 |   });\n      189 |\n      190 |   test('GET /repaircategories should include manufacturers and devices data', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:187:20)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/repaircategories.external.test.js",
            "startTime": 1757467912514,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/appointment.inventory.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /inventory succeeded: {}\n\n      at log (tests/api/external/appointment.inventory.external.test.js:14:13)\n\n  console.error\n    Test for /inventory failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.inventory.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.inventory.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.inventory.external.test.js\n  External RepairDesk API Tests - Inventory\n    ✕ GET /inventory should return response (30 ms)\n    ✓ GET /inventory with invalid API key should return empty object (1 ms)\n\n  ● External RepairDesk API Tests - Inventory › GET /inventory should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /inventory should return response', async () => {\n      28 |     const result = await testEndpoint('/inventory');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.inventory.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.477 s, estimated 4 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.inventory.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.inventory.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/appointment.inventory.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-appointment.inventory.external.test.json\n  console.log\n    Test for /inventory succeeded: {}\n\n      at log (tests/api/external/appointment.inventory.external.test.js:14:13)\n\n  console.error\n    Test for /inventory failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.inventory.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.inventory.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.inventory.external.test.js\n  External RepairDesk API Tests - Inventory\n    ✕ GET /inventory should return response (30 ms)\n    ✓ GET /inventory with invalid API key should return empty object (1 ms)\n\n  ● External RepairDesk API Tests - Inventory › GET /inventory should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /inventory should return response', async () => {\n      28 |     const result = await testEndpoint('/inventory');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.inventory.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.477 s, estimated 4 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.inventory.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.inventory.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 2,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467914609,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Inventory"
                ],
                "duration": 30,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).not.toBeNull()\n\nReceived: null",
                      "pass": true
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).not.toBeNull()\n\nReceived: null\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/appointment.inventory.external.test.js:29:24)"
                ],
                "fullName": "External RepairDesk API Tests - Inventory GET /inventory should return response",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /inventory should return response"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Inventory"
                ],
                "duration": 1,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Inventory GET /inventory with invalid API key should return empty object",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /inventory with invalid API key should return empty object"
              }
            ],
            "endTime": 1757467915078,
            "message": "  ● External RepairDesk API Tests - Inventory › GET /inventory should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /inventory should return response', async () => {\n      28 |     const result = await testEndpoint('/inventory');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.inventory.external.test.js:29:24)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/appointment.inventory.external.test.js",
            "startTime": 1757467914697,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/appointment.locations.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /locations succeeded: {}\n\n      at log (tests/api/external/appointment.locations.external.test.js:14:13)\n\n  console.error\n    Test for /locations failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.locations.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.locations.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.locations.external.test.js\n  External RepairDesk API Tests - Locations\n    ✕ GET /locations should return response (174 ms)\n    ✓ GET /locations with invalid API key should return empty object (4 ms)\n\n  ● External RepairDesk API Tests - Locations › GET /locations should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /locations should return response', async () => {\n      28 |     const result = await testEndpoint('/locations');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.locations.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.889 s, estimated 6 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.locations.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.locations.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/appointment.locations.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-appointment.locations.external.test.json\n  console.log\n    Test for /locations succeeded: {}\n\n      at log (tests/api/external/appointment.locations.external.test.js:14:13)\n\n  console.error\n    Test for /locations failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.locations.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.locations.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.locations.external.test.js\n  External RepairDesk API Tests - Locations\n    ✕ GET /locations should return response (174 ms)\n    ✓ GET /locations with invalid API key should return empty object (4 ms)\n\n  ● External RepairDesk API Tests - Locations › GET /locations should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /locations should return response', async () => {\n      28 |     const result = await testEndpoint('/locations');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.locations.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.889 s, estimated 6 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.locations.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.locations.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 2,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467916666,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Locations"
                ],
                "duration": 174,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).not.toBeNull()\n\nReceived: null",
                      "pass": true
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).not.toBeNull()\n\nReceived: null\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/appointment.locations.external.test.js:29:24)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Locations GET /locations should return response",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /locations should return response"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Locations"
                ],
                "duration": 4,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Locations GET /locations with invalid API key should return empty object",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /locations with invalid API key should return empty object"
              }
            ],
            "endTime": 1757467917540,
            "message": "  ● External RepairDesk API Tests - Locations › GET /locations should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /locations should return response', async () => {\n      28 |     const result = await testEndpoint('/locations');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.locations.external.test.js:29:24)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/appointment.locations.external.test.js",
            "startTime": 1757467916762,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/appointment.repairtypes.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /repairtypes succeeded: {}\n\n      at log (tests/api/external/appointment.repairtypes.external.test.js:14:13)\n\n  console.error\n    Test for /repairtypes failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.repairtypes.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.repairtypes.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.repairtypes.external.test.js\n  External RepairDesk API Tests - Repair Types\n    ✕ GET /repairtypes should return response (39 ms)\n    ✓ GET /repairtypes with invalid API key should return empty object (2 ms)\n\n  ● External RepairDesk API Tests - Repair Types › GET /repairtypes should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /repairtypes should return response', async () => {\n      28 |     const result = await testEndpoint('/repairtypes');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.repairtypes.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        1.097 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.repairtypes.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.repairtypes.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/appointment.repairtypes.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-appointment.repairtypes.external.test.json\n  console.log\n    Test for /repairtypes succeeded: {}\n\n      at log (tests/api/external/appointment.repairtypes.external.test.js:14:13)\n\n  console.error\n    Test for /repairtypes failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.repairtypes.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.repairtypes.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.repairtypes.external.test.js\n  External RepairDesk API Tests - Repair Types\n    ✕ GET /repairtypes should return response (39 ms)\n    ✓ GET /repairtypes with invalid API key should return empty object (2 ms)\n\n  ● External RepairDesk API Tests - Repair Types › GET /repairtypes should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /repairtypes should return response', async () => {\n      28 |     const result = await testEndpoint('/repairtypes');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.repairtypes.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        1.097 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.repairtypes.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.repairtypes.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 2,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467920163,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Types"
                ],
                "duration": 39,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).not.toBeNull()\n\nReceived: null",
                      "pass": true
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).not.toBeNull()\n\nReceived: null\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/appointment.repairtypes.external.test.js:29:24)"
                ],
                "fullName": "External RepairDesk API Tests - Repair Types GET /repairtypes should return response",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /repairtypes should return response"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Repair Types"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Repair Types GET /repairtypes with invalid API key should return empty object",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /repairtypes with invalid API key should return empty object"
              }
            ],
            "endTime": 1757467921243,
            "message": "  ● External RepairDesk API Tests - Repair Types › GET /repairtypes should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /repairtypes should return response', async () => {\n      28 |     const result = await testEndpoint('/repairtypes');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.repairtypes.external.test.js:29:24)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/appointment.repairtypes.external.test.js",
            "startTime": 1757467920310,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/tickets.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (60 ms)\n    ✓ GET /tickets with pagination should work (3 ms)\n    ✓ POST /tickets should create new ticket (3 ms)\n    ✕ POST /tickets with missing required fields should return error (4 ms)\n    ✕ GET /tickets with invalid API key should return error (2 ms)\n    ✓ GET /tickets with different priorities should work (10 ms)\n    ✓ GET /tickets with status filter should work (7 ms)\n    ✓ GET /tickets with date range should work (6 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.237 s, estimated 2 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/tickets.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-tickets.external.test.json\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (60 ms)\n    ✓ GET /tickets with pagination should work (3 ms)\n    ✓ POST /tickets should create new ticket (3 ms)\n    ✕ POST /tickets with missing required fields should return error (4 ms)\n    ✕ GET /tickets with invalid API key should return error (2 ms)\n    ✓ GET /tickets with different priorities should work (10 ms)\n    ✓ GET /tickets with status filter should work (7 ms)\n    ✓ GET /tickets with date range should work (6 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.237 s, estimated 2 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 8,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467924142,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 60,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets should return ticket list",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets should return ticket list"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 3,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with pagination should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with pagination should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 3,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets POST /tickets should create new ticket",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /tickets should create new ticket"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 4,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/tickets.external.test.js:94:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Tickets POST /tickets with missing required fields should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /tickets with missing required fields should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 2,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/tickets.external.test.js:110:20)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
                ],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with invalid API key should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /tickets with invalid API key should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 10,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with different priorities should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with different priorities should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 7,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with status filter should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with status filter should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Tickets"
                ],
                "duration": 6,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Tickets GET /tickets with date range should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /tickets with date range should work"
              }
            ],
            "endTime": 1757467925364,
            "message": "  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/tickets.external.test.js",
            "startTime": 1757467924250,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "file": "tests/api/external/customer.external.test.js",
      "success": false,
      "stdout": "",
      "stderr": "  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (60 ms)\n    ✓ GET /customers with pagination should work (3 ms)\n    ✓ GET /customers/:id with valid ID should return customer (2 ms)\n    ✕ GET /customers/:id with invalid ID should return error (9 ms)\n    ✓ POST /customers should create new customer (4 ms)\n    ✕ POST /customers with missing required fields should return error (2 ms)\n    ✓ POST /customers with duplicate email should return error (2 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (1 ms)\n    ✕ GET /customers with invalid API key should return error (4 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.378 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n",
      "error": "Command failed: npx jest tests/api/external/customer.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-customer.external.test.json\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (60 ms)\n    ✓ GET /customers with pagination should work (3 ms)\n    ✓ GET /customers/:id with valid ID should return customer (2 ms)\n    ✕ GET /customers/:id with invalid ID should return error (9 ms)\n    ✓ POST /customers should create new customer (4 ms)\n    ✕ POST /customers with missing required fields should return error (2 ms)\n    ✓ POST /customers with duplicate email should return error (2 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (1 ms)\n    ✕ GET /customers with invalid API key should return error (4 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.378 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n",
      "detailed": {
        "numFailedTestSuites": 1,
        "numFailedTests": 4,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 10,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1757467928913,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 60,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers GET /customers should return customer list",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /customers should return customer list"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 3,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers GET /customers with pagination should work",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /customers with pagination should work"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers GET /customers/:id with valid ID should return customer",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "GET /customers/:id with valid ID should return customer"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 9,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:82:20)"
                ],
                "fullName": "External RepairDesk API Tests - Customers GET /customers/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /customers/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 4,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers POST /customers should create new customer",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 3,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /customers should create new customer"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:110:20)"
                ],
                "fullName": "External RepairDesk API Tests - Customers POST /customers with missing required fields should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "POST /customers with missing required fields should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers POST /customers with duplicate email should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 2,
                "retryReasons": [],
                "status": "passed",
                "title": "POST /customers with duplicate email should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 2,
                "failureDetails": [],
                "failureMessages": [],
                "fullName": "External RepairDesk API Tests - Customers PUT /customers/:id should update customer",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "passed",
                "title": "PUT /customers/:id should update customer"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 1,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:151:20)"
                ],
                "fullName": "External RepairDesk API Tests - Customers PUT /customers/:id with invalid ID should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 1,
                "retryReasons": [],
                "status": "failed",
                "title": "PUT /customers/:id with invalid ID should return error"
              },
              {
                "ancestorTitles": [
                  "External RepairDesk API Tests - Customers"
                ],
                "duration": 4,
                "failureDetails": [
                  {
                    "matcherResult": {
                      "message": "expect(received).toBeNull()\n\nReceived: {}",
                      "pass": false
                    }
                  }
                ],
                "failureMessages": [
                  "Error: expect(received).toBeNull()\n\nReceived: {}\n    at Object.toBeNull (/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js:167:20)"
                ],
                "fullName": "External RepairDesk API Tests - Customers GET /customers with invalid API key should return error",
                "invocations": 1,
                "location": null,
                "numPassingAsserts": 0,
                "retryReasons": [],
                "status": "failed",
                "title": "GET /customers with invalid API key should return error"
              }
            ],
            "endTime": 1757467930274,
            "message": "  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n",
            "name": "/Users/apple/Desktop/Websites Code/NexusTechHub.com/tests/api/external/customer.external.test.js",
            "startTime": 1757467929025,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    }
  ],
  "createdData": [],
  "cleanupActions": [],
  "workflowTests": [],
  "failures": [
    {
      "file": "tests/api/external/tickets.external.test.js",
      "error": "Command failed: npx jest tests/api/external/tickets.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-tickets.external.test.json\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (48 ms)\n    ✓ GET /tickets with pagination should work (4 ms)\n    ✓ POST /tickets should create new ticket (6 ms)\n    ✕ POST /tickets with missing required fields should return error (8 ms)\n    ✕ GET /tickets with invalid API key should return error (1 ms)\n    ✓ GET /tickets with different priorities should work (8 ms)\n    ✓ GET /tickets with status filter should work (1 ms)\n    ✓ GET /tickets with date range should work (4 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.279 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n",
      "stderr": "  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (48 ms)\n    ✓ GET /tickets with pagination should work (4 ms)\n    ✓ POST /tickets should create new ticket (6 ms)\n    ✕ POST /tickets with missing required fields should return error (8 ms)\n    ✕ GET /tickets with invalid API key should return error (1 ms)\n    ✓ GET /tickets with different priorities should work (8 ms)\n    ✓ GET /tickets with status filter should work (1 ms)\n    ✓ GET /tickets with date range should work (4 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.279 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n"
    },
    {
      "file": "tests/api/external/customer.external.test.js",
      "error": "Command failed: npx jest tests/api/external/customer.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-customer.external.test.json\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (63 ms)\n    ✓ GET /customers with pagination should work (5 ms)\n    ✓ GET /customers/:id with valid ID should return customer (8 ms)\n    ✕ GET /customers/:id with invalid ID should return error (11 ms)\n    ✓ POST /customers should create new customer (2 ms)\n    ✕ POST /customers with missing required fields should return error (8 ms)\n    ✓ POST /customers with duplicate email should return error (3 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (2 ms)\n    ✕ GET /customers with invalid API key should return error (3 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.211 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n",
      "stderr": "  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (63 ms)\n    ✓ GET /customers with pagination should work (5 ms)\n    ✓ GET /customers/:id with valid ID should return customer (8 ms)\n    ✕ GET /customers/:id with invalid ID should return error (11 ms)\n    ✓ POST /customers should create new customer (2 ms)\n    ✕ POST /customers with missing required fields should return error (8 ms)\n    ✓ POST /customers with duplicate email should return error (3 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (2 ms)\n    ✕ GET /customers with invalid API key should return error (3 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.211 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n"
    },
    {
      "file": "tests/api/external/invoices.external.test.js",
      "error": "Command failed: npx jest tests/api/external/invoices.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-invoices.external.test.json\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    No invoices found for individual test\n\n      at Object.log (tests/api/external/invoices.external.test.js:79:15)\n\n  console.log\n    Test for /invoices/999999999 succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\nFAIL tests/api/external/invoices.external.test.js\n  External RepairDesk API Tests - Invoices\n    ✓ GET /invoices should return invoice list (34 ms)\n    ✓ GET /invoices with pagination should work (2 ms)\n    ✓ GET /invoices/:id with valid ID should return invoice (2 ms)\n    ✕ GET /invoices/:id with invalid ID should return error (5 ms)\n    ✓ POST /invoices should create new invoice (4 ms)\n    ✕ POST /invoices with missing required fields should return error (3 ms)\n    ✕ POST /invoices with invalid customer ID should return error (3 ms)\n    ✓ GET /invoices with status filter should work (1 ms)\n    ✓ GET /invoices with date range should work (1 ms)\n    ✕ GET /invoices with invalid API key should return error\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      84 |     const result = await testEndpoint(`/invoices/${config.nonExistentTicketId}`);\n      85 |     // Depending on API, might return null or error response\n    > 86 |     expect(result).toBeNull();\n         |                    ^\n      87 |   });\n      88 |\n      89 |   test('POST /invoices should create new invoice', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:86:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      128 |\n      129 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 130 |     expect(result).toBeNull(); // Should fail due to missing required fields\n          |                    ^\n      131 |   });\n      132 |\n      133 |   test('POST /invoices with invalid customer ID should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:130:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with invalid customer ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      147 |\n      148 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 149 |     expect(result).toBeNull(); // Should fail due to invalid customer\n          |                    ^\n      150 |   });\n      151 |\n      152 |   test('GET /invoices with status filter should work', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:149:20)\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      175 |\n      176 |     const result = await invalidTestEndpoint('/invoices');\n    > 177 |     expect(result).toBeNull();\n          |                    ^\n      178 |   });\n      179 | });\n      180 |\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:177:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        0.579 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/invoices.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-invoices.external.test.json\n",
      "stderr": "  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    No invoices found for individual test\n\n      at Object.log (tests/api/external/invoices.external.test.js:79:15)\n\n  console.log\n    Test for /invoices/999999999 succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\n  console.log\n    Test for /invoices succeeded: {}\n\n      at log (tests/api/external/invoices.external.test.js:28:13)\n\nFAIL tests/api/external/invoices.external.test.js\n  External RepairDesk API Tests - Invoices\n    ✓ GET /invoices should return invoice list (34 ms)\n    ✓ GET /invoices with pagination should work (2 ms)\n    ✓ GET /invoices/:id with valid ID should return invoice (2 ms)\n    ✕ GET /invoices/:id with invalid ID should return error (5 ms)\n    ✓ POST /invoices should create new invoice (4 ms)\n    ✕ POST /invoices with missing required fields should return error (3 ms)\n    ✕ POST /invoices with invalid customer ID should return error (3 ms)\n    ✓ GET /invoices with status filter should work (1 ms)\n    ✓ GET /invoices with date range should work (1 ms)\n    ✕ GET /invoices with invalid API key should return error\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      84 |     const result = await testEndpoint(`/invoices/${config.nonExistentTicketId}`);\n      85 |     // Depending on API, might return null or error response\n    > 86 |     expect(result).toBeNull();\n         |                    ^\n      87 |   });\n      88 |\n      89 |   test('POST /invoices should create new invoice', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:86:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      128 |\n      129 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 130 |     expect(result).toBeNull(); // Should fail due to missing required fields\n          |                    ^\n      131 |   });\n      132 |\n      133 |   test('POST /invoices with invalid customer ID should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:130:20)\n\n  ● External RepairDesk API Tests - Invoices › POST /invoices with invalid customer ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      147 |\n      148 |     const result = await testEndpoint('/invoices', 'POST', invalidInvoice);\n    > 149 |     expect(result).toBeNull(); // Should fail due to invalid customer\n          |                    ^\n      150 |   });\n      151 |\n      152 |   test('GET /invoices with status filter should work', async () => {\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:149:20)\n\n  ● External RepairDesk API Tests - Invoices › GET /invoices with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      175 |\n      176 |     const result = await invalidTestEndpoint('/invoices');\n    > 177 |     expect(result).toBeNull();\n          |                    ^\n      178 |   });\n      179 | });\n      180 |\n\n      at Object.toBeNull (tests/api/external/invoices.external.test.js:177:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        0.579 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/invoices.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-invoices.external.test.json\n"
    },
    {
      "file": "tests/api/external/repaircategories.external.test.js",
      "error": "Command failed: npx jest tests/api/external/repaircategories.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-repaircategories.external.test.json\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for individual test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:73:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for update test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:135:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Could not create test category for delete test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:165:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\nFAIL tests/api/external/repaircategories.external.test.js\n  External RepairDesk API Tests - Repair Categories\n    ✓ GET /repaircategories should return repair categories list (41 ms)\n    ✓ GET /repaircategories/:id with valid ID should return repair category (2 ms)\n    ✕ GET /repaircategories/:id with invalid ID should return error (2 ms)\n    ✓ POST /repaircategories should create new repair category (2 ms)\n    ✕ POST /repaircategories with missing required fields should return error (1 ms)\n    ✓ POST /repaircategories with duplicate name should return error (1 ms)\n    ✓ PUT /repaircategories/:id should update repair category (2 ms)\n    ✕ PUT /repaircategories/:id with invalid ID should return error (1 ms)\n    ✓ DELETE /repaircategories/:id should delete repair category (2 ms)\n    ✕ DELETE /repaircategories/:id with invalid ID should return error (1 ms)\n    ✕ GET /repaircategories with invalid API key should return error\n    ✓ GET /repaircategories should include manufacturers and devices data (1 ms)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      78 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`);\n      79 |     // Depending on API, might return null or error response\n    > 80 |     expect(result).toBeNull();\n         |                    ^\n      81 |   });\n      82 |\n      83 |   test('POST /repaircategories should create new repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:80:20)\n\n  ● External RepairDesk API Tests - Repair Categories › POST /repaircategories with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      102 |\n      103 |     const result = await testEndpoint('/repaircategories', 'POST', invalidCategory);\n    > 104 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      105 |   });\n      106 |\n      107 |   test('POST /repaircategories with duplicate name should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:104:20)\n\n  ● External RepairDesk API Tests - Repair Categories › PUT /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      143 |\n      144 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 145 |     expect(result).toBeNull();\n          |                    ^\n      146 |   });\n      147 |\n      148 |   test('DELETE /repaircategories/:id should delete repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:145:20)\n\n  ● External RepairDesk API Tests - Repair Categories › DELETE /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      169 |   test('DELETE /repaircategories/:id with invalid ID should return error', async () => {\n      170 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'DELETE');\n    > 171 |     expect(result).toBeNull();\n          |                    ^\n      172 |   });\n      173 |\n      174 |   test('GET /repaircategories with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:171:20)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      185 |\n      186 |     const result = await invalidTestEndpoint('/repaircategories');\n    > 187 |     expect(result).toBeNull();\n          |                    ^\n      188 |   });\n      189 |\n      190 |   test('GET /repaircategories should include manufacturers and devices data', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:187:20)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        0.566 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/repaircategories.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-repaircategories.external.test.json\n",
      "stderr": "  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for individual test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:73:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    No repair categories found for update test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:135:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Could not create test category for delete test\n\n      at Object.log (tests/api/external/repaircategories.external.test.js:165:15)\n\n  console.log\n    Test for /repaircategories/999999999 succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\n  console.log\n    Test for /repaircategories succeeded: {}\n\n      at log (tests/api/external/repaircategories.external.test.js:28:13)\n\nFAIL tests/api/external/repaircategories.external.test.js\n  External RepairDesk API Tests - Repair Categories\n    ✓ GET /repaircategories should return repair categories list (41 ms)\n    ✓ GET /repaircategories/:id with valid ID should return repair category (2 ms)\n    ✕ GET /repaircategories/:id with invalid ID should return error (2 ms)\n    ✓ POST /repaircategories should create new repair category (2 ms)\n    ✕ POST /repaircategories with missing required fields should return error (1 ms)\n    ✓ POST /repaircategories with duplicate name should return error (1 ms)\n    ✓ PUT /repaircategories/:id should update repair category (2 ms)\n    ✕ PUT /repaircategories/:id with invalid ID should return error (1 ms)\n    ✓ DELETE /repaircategories/:id should delete repair category (2 ms)\n    ✕ DELETE /repaircategories/:id with invalid ID should return error (1 ms)\n    ✕ GET /repaircategories with invalid API key should return error\n    ✓ GET /repaircategories should include manufacturers and devices data (1 ms)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      78 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`);\n      79 |     // Depending on API, might return null or error response\n    > 80 |     expect(result).toBeNull();\n         |                    ^\n      81 |   });\n      82 |\n      83 |   test('POST /repaircategories should create new repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:80:20)\n\n  ● External RepairDesk API Tests - Repair Categories › POST /repaircategories with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      102 |\n      103 |     const result = await testEndpoint('/repaircategories', 'POST', invalidCategory);\n    > 104 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      105 |   });\n      106 |\n      107 |   test('POST /repaircategories with duplicate name should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:104:20)\n\n  ● External RepairDesk API Tests - Repair Categories › PUT /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      143 |\n      144 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 145 |     expect(result).toBeNull();\n          |                    ^\n      146 |   });\n      147 |\n      148 |   test('DELETE /repaircategories/:id should delete repair category', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:145:20)\n\n  ● External RepairDesk API Tests - Repair Categories › DELETE /repaircategories/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      169 |   test('DELETE /repaircategories/:id with invalid ID should return error', async () => {\n      170 |     const result = await testEndpoint(`/repaircategories/${config.nonExistentTicketId}`, 'DELETE');\n    > 171 |     expect(result).toBeNull();\n          |                    ^\n      172 |   });\n      173 |\n      174 |   test('GET /repaircategories with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:171:20)\n\n  ● External RepairDesk API Tests - Repair Categories › GET /repaircategories with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      185 |\n      186 |     const result = await invalidTestEndpoint('/repaircategories');\n    > 187 |     expect(result).toBeNull();\n          |                    ^\n      188 |   });\n      189 |\n      190 |   test('GET /repaircategories should include manufacturers and devices data', async () => {\n\n      at Object.toBeNull (tests/api/external/repaircategories.external.test.js:187:20)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        0.566 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/repaircategories.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-repaircategories.external.test.json\n"
    },
    {
      "file": "tests/api/external/appointment.inventory.external.test.js",
      "error": "Command failed: npx jest tests/api/external/appointment.inventory.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-appointment.inventory.external.test.json\n  console.log\n    Test for /inventory succeeded: {}\n\n      at log (tests/api/external/appointment.inventory.external.test.js:14:13)\n\n  console.error\n    Test for /inventory failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.inventory.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.inventory.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.inventory.external.test.js\n  External RepairDesk API Tests - Inventory\n    ✕ GET /inventory should return response (30 ms)\n    ✓ GET /inventory with invalid API key should return empty object (1 ms)\n\n  ● External RepairDesk API Tests - Inventory › GET /inventory should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /inventory should return response', async () => {\n      28 |     const result = await testEndpoint('/inventory');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.inventory.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.477 s, estimated 4 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.inventory.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.inventory.external.test.json\n",
      "stderr": "  console.log\n    Test for /inventory succeeded: {}\n\n      at log (tests/api/external/appointment.inventory.external.test.js:14:13)\n\n  console.error\n    Test for /inventory failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.inventory.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.inventory.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.inventory.external.test.js\n  External RepairDesk API Tests - Inventory\n    ✕ GET /inventory should return response (30 ms)\n    ✓ GET /inventory with invalid API key should return empty object (1 ms)\n\n  ● External RepairDesk API Tests - Inventory › GET /inventory should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /inventory should return response', async () => {\n      28 |     const result = await testEndpoint('/inventory');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.inventory.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.477 s, estimated 4 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.inventory.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.inventory.external.test.json\n"
    },
    {
      "file": "tests/api/external/appointment.locations.external.test.js",
      "error": "Command failed: npx jest tests/api/external/appointment.locations.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-appointment.locations.external.test.json\n  console.log\n    Test for /locations succeeded: {}\n\n      at log (tests/api/external/appointment.locations.external.test.js:14:13)\n\n  console.error\n    Test for /locations failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.locations.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.locations.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.locations.external.test.js\n  External RepairDesk API Tests - Locations\n    ✕ GET /locations should return response (174 ms)\n    ✓ GET /locations with invalid API key should return empty object (4 ms)\n\n  ● External RepairDesk API Tests - Locations › GET /locations should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /locations should return response', async () => {\n      28 |     const result = await testEndpoint('/locations');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.locations.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.889 s, estimated 6 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.locations.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.locations.external.test.json\n",
      "stderr": "  console.log\n    Test for /locations succeeded: {}\n\n      at log (tests/api/external/appointment.locations.external.test.js:14:13)\n\n  console.error\n    Test for /locations failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.locations.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.locations.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.locations.external.test.js\n  External RepairDesk API Tests - Locations\n    ✕ GET /locations should return response (174 ms)\n    ✓ GET /locations with invalid API key should return empty object (4 ms)\n\n  ● External RepairDesk API Tests - Locations › GET /locations should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /locations should return response', async () => {\n      28 |     const result = await testEndpoint('/locations');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.locations.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.889 s, estimated 6 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.locations.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.locations.external.test.json\n"
    },
    {
      "file": "tests/api/external/appointment.repairtypes.external.test.js",
      "error": "Command failed: npx jest tests/api/external/appointment.repairtypes.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-appointment.repairtypes.external.test.json\n  console.log\n    Test for /repairtypes succeeded: {}\n\n      at log (tests/api/external/appointment.repairtypes.external.test.js:14:13)\n\n  console.error\n    Test for /repairtypes failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.repairtypes.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.repairtypes.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.repairtypes.external.test.js\n  External RepairDesk API Tests - Repair Types\n    ✕ GET /repairtypes should return response (39 ms)\n    ✓ GET /repairtypes with invalid API key should return empty object (2 ms)\n\n  ● External RepairDesk API Tests - Repair Types › GET /repairtypes should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /repairtypes should return response', async () => {\n      28 |     const result = await testEndpoint('/repairtypes');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.repairtypes.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        1.097 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.repairtypes.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.repairtypes.external.test.json\n",
      "stderr": "  console.log\n    Test for /repairtypes succeeded: {}\n\n      at log (tests/api/external/appointment.repairtypes.external.test.js:14:13)\n\n  console.error\n    Test for /repairtypes failed: Response success is false\n\n      17 |     return data;\n      18 |   } catch (error) {\n    > 19 |     console.error(`Test for ${endpoint} failed:`, error.message);\n         |             ^\n      20 |     // Log to Sentry if configured\n      21 |     // if (Sentry) Sentry.captureException(error, { extra: { endpoint, method, body, params } });\n      22 |     return null;\n\n      at error (tests/api/external/appointment.repairtypes.external.test.js:19:13)\n      at Object.<anonymous> (tests/api/external/appointment.repairtypes.external.test.js:28:20)\n\nFAIL tests/api/external/appointment.repairtypes.external.test.js\n  External RepairDesk API Tests - Repair Types\n    ✕ GET /repairtypes should return response (39 ms)\n    ✓ GET /repairtypes with invalid API key should return empty object (2 ms)\n\n  ● External RepairDesk API Tests - Repair Types › GET /repairtypes should return response\n\n    expect(received).not.toBeNull()\n\n    Received: null\n\n      27 |   test('GET /repairtypes should return response', async () => {\n      28 |     const result = await testEndpoint('/repairtypes');\n    > 29 |     expect(result).not.toBeNull();\n         |                        ^\n      30 |     // Note: API returns {} which doesn't have success: true, so we just check it's an object\n      31 |     expect(typeof result).toBe('object');\n      32 |   });\n\n      at Object.toBeNull (tests/api/external/appointment.repairtypes.external.test.js:29:24)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        1.097 s, estimated 9 s\nRan all test suites matching /tests\\/api\\/external\\/appointment.repairtypes.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-appointment.repairtypes.external.test.json\n"
    },
    {
      "file": "tests/api/external/tickets.external.test.js",
      "error": "Command failed: npx jest tests/api/external/tickets.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-tickets.external.test.json\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (60 ms)\n    ✓ GET /tickets with pagination should work (3 ms)\n    ✓ POST /tickets should create new ticket (3 ms)\n    ✕ POST /tickets with missing required fields should return error (4 ms)\n    ✕ GET /tickets with invalid API key should return error (2 ms)\n    ✓ GET /tickets with different priorities should work (10 ms)\n    ✓ GET /tickets with status filter should work (7 ms)\n    ✓ GET /tickets with date range should work (6 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.237 s, estimated 2 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n",
      "stderr": "  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\n  console.log\n    Test for /tickets succeeded: {}\n\n      at log (tests/api/external/tickets.external.test.js:28:13)\n\nFAIL tests/api/external/tickets.external.test.js\n  External RepairDesk API Tests - Tickets\n    ✓ GET /tickets should return ticket list (60 ms)\n    ✓ GET /tickets with pagination should work (3 ms)\n    ✓ POST /tickets should create new ticket (3 ms)\n    ✕ POST /tickets with missing required fields should return error (4 ms)\n    ✕ GET /tickets with invalid API key should return error (2 ms)\n    ✓ GET /tickets with different priorities should work (10 ms)\n    ✓ GET /tickets with status filter should work (7 ms)\n    ✓ GET /tickets with date range should work (6 ms)\n\n  ● External RepairDesk API Tests - Tickets › POST /tickets with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      92 |\n      93 |     const result = await testEndpoint('/tickets', 'POST', invalidTicket);\n    > 94 |     expect(result).toBeNull(); // Should fail due to missing required fields\n         |                    ^\n      95 |   });\n      96 |\n      97 |   test('GET /tickets with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:94:20)\n\n  ● External RepairDesk API Tests - Tickets › GET /tickets with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await invalidTestEndpoint('/tickets');\n    > 110 |     expect(result).toBeNull();\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('GET /tickets with different priorities should work', async () => {\n\n      at Object.toBeNull (tests/api/external/tickets.external.test.js:110:20)\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 6 passed, 8 total\nSnapshots:   0 total\nTime:        1.237 s, estimated 2 s\nRan all test suites matching /tests\\/api\\/external\\/tickets.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-tickets.external.test.json\n"
    },
    {
      "file": "tests/api/external/customer.external.test.js",
      "error": "Command failed: npx jest tests/api/external/customer.external.test.js --config jest.api.config.js --verbose --json --outputFile=/tmp/test-results-customer.external.test.json\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (60 ms)\n    ✓ GET /customers with pagination should work (3 ms)\n    ✓ GET /customers/:id with valid ID should return customer (2 ms)\n    ✕ GET /customers/:id with invalid ID should return error (9 ms)\n    ✓ POST /customers should create new customer (4 ms)\n    ✕ POST /customers with missing required fields should return error (2 ms)\n    ✓ POST /customers with duplicate email should return error (2 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (1 ms)\n    ✕ GET /customers with invalid API key should return error (4 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.378 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n",
      "stderr": "  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for individual test\n\n      at Object.log (tests/api/external/customer.external.test.js:75:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    Test for /customers succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\n  console.log\n    No customers found for update test\n\n      at Object.log (tests/api/external/customer.external.test.js:141:15)\n\n  console.log\n    Test for /customers/999999999 succeeded: {}\n\n      at log (tests/api/external/customer.external.test.js:28:13)\n\nFAIL tests/api/external/customer.external.test.js\n  External RepairDesk API Tests - Customers\n    ✓ GET /customers should return customer list (60 ms)\n    ✓ GET /customers with pagination should work (3 ms)\n    ✓ GET /customers/:id with valid ID should return customer (2 ms)\n    ✕ GET /customers/:id with invalid ID should return error (9 ms)\n    ✓ POST /customers should create new customer (4 ms)\n    ✕ POST /customers with missing required fields should return error (2 ms)\n    ✓ POST /customers with duplicate email should return error (2 ms)\n    ✓ PUT /customers/:id should update customer (2 ms)\n    ✕ PUT /customers/:id with invalid ID should return error (1 ms)\n    ✕ GET /customers with invalid API key should return error (4 ms)\n\n  ● External RepairDesk API Tests - Customers › GET /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      80 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`);\n      81 |     // Depending on API, might return null or error response\n    > 82 |     expect(result).toBeNull();\n         |                    ^\n      83 |   });\n      84 |\n      85 |   test('POST /customers should create new customer', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:82:20)\n\n  ● External RepairDesk API Tests - Customers › POST /customers with missing required fields should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      108 |\n      109 |     const result = await testEndpoint('/customers', 'POST', invalidCustomer);\n    > 110 |     expect(result).toBeNull(); // Should fail due to missing name\n          |                    ^\n      111 |   });\n      112 |\n      113 |   test('POST /customers with duplicate email should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:110:20)\n\n  ● External RepairDesk API Tests - Customers › PUT /customers/:id with invalid ID should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      149 |\n      150 |     const result = await testEndpoint(`/customers/${config.nonExistentTicketId}`, 'PUT', updateData);\n    > 151 |     expect(result).toBeNull();\n          |                    ^\n      152 |   });\n      153 |\n      154 |   test('GET /customers with invalid API key should return error', async () => {\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:151:20)\n\n  ● External RepairDesk API Tests - Customers › GET /customers with invalid API key should return error\n\n    expect(received).toBeNull()\n\n    Received: {}\n\n      165 |\n      166 |     const result = await invalidTestEndpoint('/customers');\n    > 167 |     expect(result).toBeNull();\n          |                    ^\n      168 |   });\n      169 | });\n      170 |\n\n      at Object.toBeNull (tests/api/external/customer.external.test.js:167:20)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 6 passed, 10 total\nSnapshots:   0 total\nTime:        1.378 s\nRan all test suites matching /tests\\/api\\/external\\/customer.external.test.js/i.\nTest results written to: ../../../../../tmp/test-results-customer.external.test.json\n"
    }
  ]
}