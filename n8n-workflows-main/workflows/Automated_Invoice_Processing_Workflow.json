{
  "id": 999,
  "name": "Automated Invoice Processing Workflow",
  "nodes": [
    {
      "name": "Email Trigger",
      "type": "n8n-nodes-base.emailTrigger",
      "position": [400, 300],
      "parameters": {
        "mailbox": "INBOX",
        "options": {
          "customEmail": "invoices@company.com"
        }
      },
      "credentials": {
        "imap": {
          "id": "1",
          "name": "IMAP Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Extract from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [600, 300],
      "parameters": {
        "operation": "pdf",
        "dataPropertyName": "data",
        "options": {}
      },
      "typeVersion": 1
    },
    {
      "name": "Check Extraction",
      "type": "n8n-nodes-base.if",
      "position": [800, 300],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json['data']}}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "name": "OCR Fallback",
      "type": "n8n-nodes-base.googleCloudVision",
      "position": [1000, 200],
      "parameters": {
        "operation": "text",
        "imageData": "={{$binary['attachment']}}"
      },
      "credentials": {
        "googleCloudVisionOAuth2Api": {
          "id": "2",
          "name": "Google Cloud Vision"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Parse Invoice Data",
      "type": "n8n-nodes-base.function",
      "position": [1200, 300],
      "parameters": {
      "functionCode": "const text = $input.item.json.data || $input.item.json.text;\nconst lines = text.split('\\n');\nconst invoiceData = {\n  vendor: '',\n  amount: '',\n  date: '',\n  invoiceNumber: ''\n};\n\n// Helper functions\nconst extractAmount = (line) => {\n  const match = line.match(/\\$\\s*\\d+(\\.\\d{2})?|\\d+(\\.\\d{2})?\\s*\\$|amount:\\s*\\$?\\d+(\\.\\d{2})?/i);\n  return match ? match[0].replace(/[^\\d.]/g, '') : null;\n};\n\nconst extractDate = (line) => {\n  const match = line.match(/\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}|\\d{4}[/-]\\d{1,2}[/-]\\d{1,2}|date:\\s*\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}/i);\n  return match ? match[0] : null;\n};\n\nconst extractInvoiceNumber = (line) => {\n  const match = line.match(/(invoice|inv)\\s*#?\\s*\\d+|#\\d+|number:\\s*\\d+/i);\n  return match ? match[0].replace(/[^\\d]/g, '') : null;\n};\n\nconst extractVendor = (line) => {\n  const match = line.match(/(vendor|from|supplier|company):\\s*(.+)/i);\n  return match ? match[2].trim() : line.replace(/[^a-zA-Z\\s]/g, '').trim();\n};\n\n// Parse each line\nfor (const line of lines) {\n  const lowerLine = line.toLowerCase();\n  if (lowerLine.includes('vendor') || lowerLine.includes('from') || lowerLine.includes('supplier') || lowerLine.includes('company')) {\n    if (!invoiceData.vendor) invoiceData.vendor = extractVendor(line);\n  }\n  if (lowerLine.includes('amount') || lowerLine.includes('total') || lowerLine.includes('sum') || lowerLine.includes('$')) {\n    if (!invoiceData.amount) invoiceData.amount = extractAmount(line);\n  }\n  if (lowerLine.includes('date') || lowerLine.includes('invoice date')) {\n    if (!invoiceData.date) invoiceData.date = extractDate(line);\n  }\n  if (lowerLine.includes('invoice') && (lowerLine.includes('number') || lowerLine.includes('no') || lowerLine.includes('#'))) {\n    if (!invoiceData.invoiceNumber) invoiceData.invoiceNumber = extractInvoiceNumber(line);\n  }\n}\n\n// Fallback if fields are empty\nif (!invoiceData.vendor || invoiceData.vendor.length < 2) invoiceData.vendor = 'Unknown Vendor';\nif (!invoiceData.amount) {\n  // Try to find any amount in the text\n  const amountMatch = text.match(/\\$\\s*\\d+(\\.\\d{2})?/);\n  invoiceData.amount = amountMatch ? amountMatch[0].replace(/[^\\d.]/g, '') : '0.00';\n}\nif (!invoiceData.date) {\n  // Try to find any date\n  const dateMatch = text.match(/\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}/);\n  invoiceData.date = dateMatch ? dateMatch[0] : new Date().toISOString().split('T')[0];\n}\nif (!invoiceData.invoiceNumber) {\n  // Try to find any number after 'invoice'\n  const numMatch = text.match(/(?<=invoice\\s*)\\d+/i);\n  invoiceData.invoiceNumber = numMatch ? numMatch[0] : 'Unknown';\n}\n\nreturn [invoiceData];"
      },
      "typeVersion": 1
    },
    {
      "name": "Log Parsed Data",
      "type": "n8n-nodes-base.slack",
      "position": [1300, 300],
      "parameters": {
        "text": "Invoice data parsed successfully",
        "channel": "#logs",
        "attachments": [
          {
            "fields": {
              "item": [
                {
                  "title": "Vendor",
                  "value": "={{$json['vendor']}}"
                },
                {
                  "title": "Amount",
                  "value": "={{$json['amount']}}"
                },
                {
                  "title": "Date",
                  "value": "={{$json['date']}}"
                },
                {
                  "title": "Invoice Number",
                  "value": "={{$json['invoiceNumber']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "position": [2400, 300],
      "parameters": {
        "text": "Error occurred in invoice processing workflow",
        "channel": "#errors",
        "attachments": [
          {
            "color": "#FF0000",
            "fields": {
              "item": [
                {
                  "title": "Error Node",
                  "value": "={{$node}}"
                },
                {
                  "title": "Error Message",
                  "value": "={{$json['error']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Email Error Notification",
      "type": "n8n-nodes-base.slack",
      "position": [400, 500],
      "parameters": {
        "text": "Error in Email Trigger: Unable to retrieve emails",
        "channel": "#errors",
        "attachments": [
          {
            "color": "#FF0000",
            "fields": {
              "item": [
                {
                  "title": "Error Details",
                  "value": "={{$json['error']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "PDF Error Notification",
      "type": "n8n-nodes-base.slack",
      "position": [600, 500],
      "parameters": {
        "text": "Error in PDF Extraction: Failed to extract text from PDF",
        "channel": "#errors",
        "attachments": [
          {
            "color": "#FF0000",
            "fields": {
              "item": [
                {
                  "title": "Error Details",
                  "value": "={{$json['error']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "OCR Error Notification",
      "type": "n8n-nodes-base.slack",
      "position": [1000, 400],
      "parameters": {
        "text": "Error in OCR Fallback: Failed to extract text via OCR",
        "channel": "#errors",
        "attachments": [
          {
            "color": "#FF0000",
            "fields": {
              "item": [
                {
                  "title": "Error Details",
                  "value": "={{$json['error']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Hubspot Search Error Notification",
      "type": "n8n-nodes-base.slack",
      "position": [1400, 500],
      "parameters": {
        "text": "Error in Hubspot Contact Search: Failed to search contacts",
        "channel": "#errors",
        "attachments": [
          {
            "color": "#FF0000",
            "fields": {
              "item": [
                {
                  "title": "Error Details",
                  "value": "={{$json['error']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Hubspot Create Contact Error Notification",
      "type": "n8n-nodes-base.slack",
      "position": [1800, 400],
      "parameters": {
        "text": "Error in Hubspot Create Contact: Failed to create contact",
        "channel": "#errors",
        "attachments": [
          {
            "color": "#FF0000",
            "fields": {
              "item": [
                {
                  "title": "Error Details",
                  "value": "={{$json['error']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Processing Log",
      "type": "n8n-nodes-base.slack",
      "position": [1300, 100],
      "parameters": {
        "text": "Invoice data parsed successfully - proceeding to Hubspot integration",
        "channel": "#logs",
        "attachments": [
          {
            "fields": {
              "item": [
                {
                  "title": "Vendor",
                  "value": "={{$json['vendor']}}"
                },
                {
                  "title": "Amount",
                  "value": "={{$json['amount']}}"
                },
                {
                  "title": "Date",
                  "value": "={{$json['date']}}"
                },
                {
                  "title": "Invoice Number",
                  "value": "={{$json['invoiceNumber']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Extraction Failure Notification",
      "type": "n8n-nodes-base.slack",
      "position": [800, 500],
      "parameters": {
        "text": "Extraction Failure: No data extracted from attachment, proceeding with OCR",
        "channel": "#logs",
        "attachments": [
          {
            "color": "#FFA500",
            "fields": {
              "item": [
                {
                  "title": "Attachment",
                  "value": "={{$binary['attachment'].fileName}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Search Hubspot Contact",
      "type": "n8n-nodes-base.hubspot",
      "position": [1400, 300],
      "parameters": {
        "operation": "searchContacts",
        "filterGroupsUi": {
          "filterGroupsValues": [
            {
              "filtersUi": {
                "filterValues": [
                  {
                    "value": "={{$json['vendor']}}",
                    "propertyName": "company"
                  }
                ]
              }
            }
          ]
        }
      },
      "credentials": {
        "hubspotOAuth2Api": {
          "id": "3",
          "name": "Hubspot Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Check Contact Found",
      "type": "n8n-nodes-base.if",
      "position": [1600, 300],
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.length}}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Create Hubspot Contact",
      "type": "n8n-nodes-base.hubspot",
      "position": [1800, 200],
      "parameters": {
        "operation": "createContact",
        "additionalFields": {
          "company": "={{$node['Parse Invoice Data'].json['vendor']}}"
        }
      },
      "credentials": {
        "hubspotOAuth2Api": {
          "id": "3",
          "name": "Hubspot Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Create Hubspot Deal",
      "type": "n8n-nodes-base.hubspot",
      "position": [2000, 300],
      "parameters": {
        "operation": "createDeal",
        "dealName": "Invoice {{$node['Parse Invoice Data'].json['invoiceNumber']}}",
        "amount": "={{parseFloat($node['Parse Invoice Data'].json['amount'].replace(/[^0-9.]/g, ''))}}",
        "closeDate": "={{new Date($node['Parse Invoice Data'].json['date']).toISOString().split('T')[0]}}",
        "associatedContactIds": "={{$node['Search Hubspot Contact'].json[0]?.id || $node['Create Hubspot Contact'].json.id}}"
      },
      "credentials": {
        "hubspotOAuth2Api": {
          "id": "3",
          "name": "Hubspot Account"
        }
      },
      "typeVersion": 1
    },
    {
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "position": [2200, 300],
      "parameters": {
        "text": "New invoice processed and deal created in Hubspot",
        "channel": "#invoices",
        "attachments": [
          {
            "fields": {
              "item": [
                {
                  "title": "Vendor",
                  "value": "={{$node['Parse Invoice Data'].json['vendor']}}"
                },
                {
                  "title": "Amount",
                  "value": "={{$node['Parse Invoice Data'].json['amount']}}"
                },
                {
                  "title": "Date",
                  "value": "={{$node['Parse Invoice Data'].json['date']}}"
                },
                {
                  "title": "Invoice Number",
                  "value": "={{$node['Parse Invoice Data'].json['invoiceNumber']}}"
                }
              ]
            }
          }
        ]
      },
      "credentials": {
        "slackApi": {
          "id": "4",
          "name": "Slack Account"
        }
      },
      "typeVersion": 1
    }
  ],
  "active": false,
  "settings": {},
  "connections": {
    "Email Trigger": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Email Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Check Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "PDF Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Extraction": {
      "main": [
        [
          {
            "node": "Extraction Failure Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "OCR Fallback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Invoice Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR Fallback": {
      "main": [
        [
          {
            "node": "Parse Invoice Data",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "OCR Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Invoice Data": {
      "main": [
        [
          {
            "node": "Processing Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processing Log": {
      "main": [
        [
          {
            "node": "Log Parsed Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Parsed Data": {
      "main": [
        [
          {
            "node": "Search Hubspot Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Hubspot Contact": {
      "main": [
        [
          {
            "node": "Check Contact Found",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Hubspot Search Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Contact Found": {
      "main": [
        [
          {
            "node": "Create Hubspot Contact",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Hubspot Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Hubspot Contact": {
      "main": [
        [
          {
            "node": "Create Hubspot Deal",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Hubspot Create Contact Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Hubspot Deal": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
