{
  "meta": {
    "instanceId": "repair-order-automation",
    "templateCredsSetupCompleted": false
  },
  "nodes": [
    {
      "id": "repair-request-webhook",
      "name": "Repair Request Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [400, 300],
      "webhookId": "repair-request-trigger",
      "parameters": {
        "path": "/repair-request",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "httpMethod": "POST"
      },
      "typeVersion": 2
    },
    {
      "id": "standardize-repair-data",
      "name": "Standardize Repair Data",
      "type": "n8n-nodes-base.set",
      "position": [600, 300],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "customer_name",
              "name": "customer_name",
              "type": "string",
              "value": "={{ $json.body.customer_name }}"
            },
            {
              "id": "customer_email",
              "name": "customer_email",
              "type": "string",
              "value": "={{ $json.body.customer_email }}"
            },
            {
              "id": "customer_phone",
              "name": "customer_phone",
              "type": "string",
              "value": "={{ $json.body.customer_phone }}"
            },
            {
              "id": "device_issue",
              "name": "device_issue",
              "type": "string",
              "value": "={{ $json.body.device_issue }}"
            },
            {
              "id": "device_imei",
              "name": "device_imei",
              "type": "string",
              "value": "={{ $json.body.device_imei }}"
            },
            {
              "id": "required_parts",
              "name": "required_parts",
              "type": "string",
              "value": "={{ $json.body.required_parts }}"
            },
            {
              "id": "estimated_cost",
              "name": "estimated_cost",
              "type": "number",
              "value": "={{ $json.body.estimated_cost }}"
            },
            {
              "id": "submission_timestamp",
              "name": "submission_timestamp",
              "type": "string",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "includeOtherFields": "="
      },
      "typeVersion": 3.4
    },
    {
      "id": "create-repair-ticket",
      "name": "Create Repair Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "position": [800, 300],
      "parameters": {
        "method": "POST",
        "url": "={{ $env.REPAIRDESK_API_URL }}/tickets",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.REPAIRDESK_API_KEY ? `Bearer ${$env.REPAIRDESK_API_KEY}` : '' }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "summary",
              "value": "={{ { customer_id: $json.customer_name, employee_id: 'auto', status: 'In Progress' } }}"
            },
            {
              "name": "devices",
              "value": "={{ [{ imei: $json.device_imei, status: 'In Progress', repairProdItems: $json.required_parts ? $json.required_parts.split(',').map(part => ({ product_id: part.trim() })) : [] }] }}"
            },
            {
              "name": "customFields",
              "value": "={{ { issue_description: $json.device_issue, estimated_cost: $json.estimated_cost, submission_timestamp: $json.submission_timestamp } }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "check-inventory-availability",
      "name": "Check Inventory Availability",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1000, 300],
      "parameters": {
        "method": "GET",
        "url": "={{ $env.REPAIRDESK_API_URL }}/inventory",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.REPAIRDESK_API_KEY ? `Bearer ${$env.REPAIRDESK_API_KEY}` : '' }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "search",
              "value": "={{ $json.required_parts }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "validate-inventory-stock",
      "name": "Validate Inventory Stock",
      "type": "n8n-nodes-base.code",
      "position": [1200, 300],
      "parameters": {
        "jsCode": "const requiredParts = $input.first().json.required_parts ? $input.first().json.required_parts.split(',') : [];\nconst inventoryData = $input.all()[1].json;\n\nlet allPartsAvailable = true;\nlet lowStockParts = [];\n\n// Check each required part against inventory\nrequiredParts.forEach(partId => {\n  const part = inventoryData.find(item => item.id === partId || item.sku === partId);\n  if (!part) {\n    allPartsAvailable = false;\n    lowStockParts.push({ id: partId, reason: 'Part not found in inventory' });\n  } else if (part.in_stock < 1) {\n    allPartsAvailable = false;\n    lowStockParts.push({ id: partId, current_stock: part.in_stock, reason: 'Out of stock' });\n  }\n});\n\nreturn {\n  json: {\n    ...$input.first().json,\n    inventory_check_passed: allPartsAvailable,\n    low_stock_parts: lowStockParts,\n    ticket_id: $input.all()[0].json.id,\n    inventory_data: inventoryData\n  }\n};"
      },
      "typeVersion": 2
    },
    {
      "id": "inventory-availability-check",
      "name": "Inventory Availability Check",
      "type": "n8n-nodes-base.if",
      "position": [1400, 300],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "inventory_available",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.inventory_check_passed }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "update-inventory-stock",
      "name": "Update Inventory Stock",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1600, 200],
      "parameters": {
        "method": "PUT",
        "url": "={{ $env.REPAIRDESK_API_URL }}/inventory/{{ $json.low_stock_parts[0].id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.REPAIRDESK_API_KEY ? `Bearer ${$env.REPAIRDESK_API_KEY}` : '' }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "in_stock",
              "value": "={{ $json.inventory_data.find(item => item.id === $json.low_stock_parts[0].id).in_stock - 1 }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "create-repair-invoice",
      "name": "Create Repair Invoice",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1800, 200],
      "parameters": {
        "method": "POST",
        "url": "={{ $env.REPAIRDESK_API_URL }}/invoices",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.REPAIRDESK_API_KEY ? `Bearer ${$env.REPAIRDESK_API_KEY}` : '' }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "summary",
              "value": "={{ { customer_id: $json.customer_name, due_on: new Date(Date.now() + 30*24*60*60*1000).toISOString().split('T')[0], created_date: new Date().toISOString().split('T')[0] } }}"
            },
            {
              "name": "items",
              "value": "={{ $json.required_parts ? $json.required_parts.split(',').map((part, index) => ({ product_id: part.trim(), quantity: 1, price: $json.estimated_cost / $json.required_parts.split(',').length, gst: 0.1 })) : [] }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "get-invoice-details",
      "name": "Get Invoice Details",
      "type": "n8n-nodes-base.httpRequest",
      "position": [2000, 200],
      "parameters": {
        "method": "GET",
        "url": "={{ $env.REPAIRDESK_API_URL }}/invoices/{{ $json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.REPAIRDESK_API_KEY ? `Bearer ${$env.REPAIRDESK_API_KEY}` : '' }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "generate-payment-link",
      "name": "Generate Payment Link",
      "type": "n8n-nodes-base.httpRequest",
      "position": [2200, 200],
      "parameters": {
        "method": "POST",
        "url": "={{ $env.STRIPE_API_URL }}/payment_links",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.STRIPE_SECRET_KEY ? `Bearer ${$env.STRIPE_SECRET_KEY}` : '' }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "amount",
              "value": "={{ Math.round($json.amount_due * 100) }}"
            },
            {
              "name": "currency",
              "value": "usd"
            },
            {
              "name": "description",
              "value": "={{ `Repair Invoice #${$json.id} for ${$json.customer_name}` }}"
            },
            {
              "name": "metadata",
              "value": "={{ { invoice_id: $json.id, customer_email: $json.customer_email } }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "send-customer-notification",
      "name": "Send Customer Notification",
      "type": "n8n-nodes-base.gmail",
      "position": [2400, 200],
      "parameters": {
        "sendTo": "={{ $json.customer_email }}",
        "message": "=<!DOCTYPE html>\n<html>\n<head>\n  <title>Repair Order Confirmation</title>\n  <style>\n    body { font-family: Arial, sans-serif; }\n    .header { background: #007bff; color: white; padding: 20px; text-align: center; }\n    .content { padding: 20px; }\n    .invoice-details { background: #f8f9fa; padding: 15px; margin: 20px 0; }\n    .payment-btn { background: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h2>Repair Order Confirmation</h2>\n  </div>\n  <div class=\"content\">\n    <p>Dear {{ $json.customer_name }},</p>\n    <p>Your repair request has been received and a ticket has been created.</p>\n    <div class=\"invoice-details\">\n      <h3>Invoice Details</h3>\n      <p><strong>Ticket ID:</strong> {{ $json.ticket_id }}</p>\n      <p><strong>Invoice ID:</strong> {{ $json.id }}</p>\n      <p><strong>Device Issue:</strong> {{ $json.device_issue }}</p>\n      <p><strong>Estimated Cost:</strong> ${{ $json.amount_due }}</p>\n      <p><strong>Status:</strong> {{ $json.status }}</p>\n    </div>\n    <p>Please complete your payment using the link below:</p>\n    <a href=\"{{ $json.url }}\" class=\"payment-btn\">Pay Now</a>\n    <p>We will notify you once the repair is complete.</p>\n    <p>Thank you for choosing our service!</p>\n  </div>\n</body>\n</html>",
        "options": {},
        "subject": "={{ `Repair Order Confirmation - Ticket #${$json.ticket_id}` }}"
      },
      "typeVersion": 2.1
    },
    {
      "id": "low-stock-notification",
      "name": "Low Stock Notification",
      "type": "n8n-nodes-base.gmail",
      "position": [1400, 500],
      "parameters": {
        "sendTo": "={{ $env.ADMIN_EMAIL }}",
        "message": "=<!DOCTYPE html>\n<html>\n<head>\n  <title>Low Stock Alert</title>\n  <style>\n    body { font-family: Arial, sans-serif; }\n    .alert { background: #ffc107; padding: 15px; border-left: 4px solid #ff6b35; }\n  </style>\n</head>\n<body>\n  <div class=\"alert\">\n    <h3>Low Stock Alert</h3>\n    <p>The following parts are low in stock or unavailable:</p>\n    <ul>\n      {{ $json.low_stock_parts.map(part => `<li>${part.id}: ${part.reason}</li>`).join('') }}\n    </ul>\n    <p>Please reorder these parts to avoid delays in repair orders.</p>\n  </div>\n</body>\n</html>",
        "options": {},
        "subject": "Low Stock Alert - Action Required"
      },
      "typeVersion": 2.1
    },
    {
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "position": [2600, 300],
      "parameters": {
        "jsCode": "const input = $input.all()[0];\n\nif (input.error) {\n  console.error('Workflow Error:', input.error.message);\n  \n  // Send error notification to admin\n  return {\n    json: {\n      error: input.error.message,\n      timestamp: new Date().toISOString(),\n      customer_email: input.json.customer_email,\n      ticket_id: input.json.ticket_id || 'N/A'\n    }\n  };\n}\n\nreturn { json: input.json };"
      },
      "typeVersion": 2
    },
    {
      "id": "admin-error-notification",
      "name": "Admin Error Notification",
      "type": "n8n-nodes-base.gmail",
      "position": [2800, 300],
      "parameters": {
        "sendTo": "={{ $env.ADMIN_EMAIL }}",
        "message": "=<!DOCTYPE html>\n<html>\n<head>\n  <title>Workflow Error Alert</title>\n  <style>\n    body { font-family: Arial, sans-serif; }\n    .error { background: #dc3545; color: white; padding: 15px; }\n  </style>\n</head>\n<body>\n  <div class=\"error\">\n    <h3>Workflow Error</h3>\n    <p><strong>Error:</strong> {{ $json.error }}</p>\n    <p><strong>Timestamp:</strong> {{ $json.timestamp }}</p>\n    <p><strong>Customer:</strong> {{ $json.customer_email }}</p>\n    <p><strong>Ticket ID:</strong> {{ $json.ticket_id }}</p>\n  </div>\n</body>\n</html>",
        "options": {},
        "subject": "Workflow Error - Immediate Attention Required"
      },
      "typeVersion": 2.1
    }
  ],
  "pinData": {},
  "connections": {
    "repair-request-webhook": {
      "main": [
        [
          {
            "node": "standardize-repair-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "standardize-repair-data": {
      "main": [
        [
          {
            "node": "create-repair-ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-repair-ticket": {
      "main": [
        [
          {
            "node": "check-inventory-availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-inventory-availability": {
      "main": [
        [
          {
            "node": "validate-inventory-stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate-inventory-stock": {
      "main": [
        [
          {
            "node": "inventory-availability-check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inventory-availability-check": {
      "main": [
        [
          {
            "node": "update-inventory-stock",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "main": [
        [
          {
            "node": "low-stock-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-inventory-stock": {
      "main": [
        [
          {
            "node": "create-repair-invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-repair-invoice": {
      "main": [
        [
          {
            "node": "get-invoice-details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-invoice-details": {
      "main": [
        [
          {
            "node": "generate-payment-link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-payment-link": {
      "main": [
        [
          {
            "node": "send-customer-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-customer-notification": {
      "main": [
        [
          {
            "node": "error-handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "low-stock-notification": {
      "main": [
        [
          {
            "node": "error-handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error-handler": {
      "main": [
        [
          {
            "node": "admin-error-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
