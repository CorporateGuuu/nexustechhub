<h1>Shopping Cart</h1>

<% if (typeof error !== 'undefined' && error) { %>
  <div class="alert alert-danger">
    <%= error %>
  </div>
<% } %>

<% if (typeof success !== 'undefined' && success) { %>
  <div class="alert alert-success">
    <%= success %>
  </div>
<% } %>

<% if (items && items.length > 0) { %>
  <div class="card">
    <div class="card-body">
      <div class="table-container">
        <table class="table">
          <thead>
            <tr>
              <th>Product</th>
              <th>Price</th>
              <th>Quantity</th>
              <th>Total</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% items.forEach(item => { %>
              <tr>
                <td>
                  <div style="display: flex; align-items: center;">
                    <div style="width: 60px; height: 60px; margin-right: 1rem;">
                      <img src="<%= item.image_url || '/placeholder.svg' %>" alt="<%= item.name %>" style="width: 100%; height: 100%; object-fit: cover;">
                    </div>
                    <div>
                      <a href="/products/<%= item.slug %>"><%= item.name %></a>
                    </div>
                  </div>
                </td>
                <td>
                  <% if (item.discount_percentage > 0) { %>
                    <div>
                      <span style="text-decoration: line-through; color: #666;">$<%= item.price.toFixed(2) %></span>
                    </div>
                    <div>
                      <strong>$<%= item.discounted_price.toFixed(2) %></strong>
                    </div>
                  <% } else { %>
                    <strong>$<%= item.price.toFixed(2) %></strong>
                  <% } %>
                </td>
                <td>
                  <div style="display: flex; align-items: center;">
                    <button class="btn btn-sm btn-secondary decrease-quantity" data-id="<%= item.id %>">-</button>
                    <input type="number" class="form-control" style="width: 60px; margin: 0 0.5rem;" value="<%= item.quantity %>" min="1" data-id="<%= item.id %>">
                    <button class="btn btn-sm btn-secondary increase-quantity" data-id="<%= item.id %>">+</button>
                  </div>
                </td>
                <td>
                  <strong>$<%= item.item_total.toFixed(2) %></strong>
                </td>
                <td>
                  <button class="btn btn-sm btn-danger remove-item" data-id="<%= item.id %>">Remove</button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
    <div class="card-footer">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
          <button class="btn btn-danger clear-cart">Clear Cart</button>
        </div>
        <div style="text-align: right;">
          <div style="margin-bottom: 1rem;">
            <strong>Subtotal:</strong> $<%= subtotal.toFixed(2) %>
          </div>
          <a href="/cart/checkout" class="btn btn-primary">Proceed to Checkout</a>
        </div>
      </div>
    </div>
  </div>
<% } else { %>
  <div class="card">
    <div class="card-body" style="text-align: center; padding: 3rem 0;">
      <h2>Your cart is empty</h2>
      <p>Looks like you haven't added any products to your cart yet.</p>
      <a href="/products" class="btn btn-primary">Browse Products</a>
    </div>
  </div>
<% } %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Update quantity
    const quantityInputs = document.querySelectorAll('input[type="number"]');
    quantityInputs.forEach(input => {
      input.addEventListener('change', function() {
        const id = this.dataset.id;
        const quantity = parseInt(this.value);
        
        if (quantity < 1) {
          this.value = 1;
          return;
        }
        
        updateCartItem(id, quantity);
      });
    });
    
    // Increase quantity
    const increaseButtons = document.querySelectorAll('.increase-quantity');
    increaseButtons.forEach(button => {
      button.addEventListener('click', function() {
        const id = this.dataset.id;
        const input = document.querySelector(`input[data-id="${id}"]`);
        let quantity = parseInt(input.value);
        quantity++;
        input.value = quantity;
        
        updateCartItem(id, quantity);
      });
    });
    
    // Decrease quantity
    const decreaseButtons = document.querySelectorAll('.decrease-quantity');
    decreaseButtons.forEach(button => {
      button.addEventListener('click', function() {
        const id = this.dataset.id;
        const input = document.querySelector(`input[data-id="${id}"]`);
        let quantity = parseInt(input.value);
        if (quantity > 1) {
          quantity--;
          input.value = quantity;
          
          updateCartItem(id, quantity);
        }
      });
    });
    
    // Remove item
    const removeButtons = document.querySelectorAll('.remove-item');
    removeButtons.forEach(button => {
      button.addEventListener('click', function() {
        const id = this.dataset.id;
        
        if (confirm('Are you sure you want to remove this item from your cart?')) {
          removeCartItem(id);
        }
      });
    });
    
    // Clear cart
    const clearCartButton = document.querySelector('.clear-cart');
    if (clearCartButton) {
      clearCartButton.addEventListener('click', function() {
        if (confirm('Are you sure you want to clear your cart?')) {
          clearCart();
        }
      });
    }
    
    // Update cart item
    function updateCartItem(id, quantity) {
      fetch(`/api/cart/update/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ quantity })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.reload();
        } else {
          alert(data.message || 'Error updating cart item');
        }
      })
      .catch(error => {
        console.error('Error updating cart item:', error);
        alert('Error updating cart item');
      });
    }
    
    // Remove cart item
    function removeCartItem(id) {
      fetch(`/api/cart/remove/${id}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.reload();
        } else {
          alert(data.message || 'Error removing cart item');
        }
      })
      .catch(error => {
        console.error('Error removing cart item:', error);
        alert('Error removing cart item');
      });
    }
    
    // Clear cart
    function clearCart() {
      fetch('/api/cart/clear', {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.reload();
        } else {
          alert(data.message || 'Error clearing cart');
        }
      })
      .catch(error => {
        console.error('Error clearing cart:', error);
        alert('Error clearing cart');
      });
    }
  });
</script>
